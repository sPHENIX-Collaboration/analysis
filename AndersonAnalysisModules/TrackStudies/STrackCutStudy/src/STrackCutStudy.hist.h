// ----------------------------------------------------------------------------
// 'STrackCutStudy.hist.h'
// Derek Anderson
// 03.14.2022
//
// Reads in the 'ntp_track' Ntuple
// generated by the SVtxEvaluator
// class and studies the impact
// of cutting on various quantities.
// ----------------------------------------------------------------------------

#pragma once

using namespace std;



// histogram methods ----------------------------------------------------------

void STrackCutStudy::InitHists() {

  // histogram binning
  const UInt_t  nNHitBins(100);
  const UInt_t  nQualBins(40);
  const UInt_t  nDcaBins(2000);
  const UInt_t  nEtaBins(400);
  const UInt_t  nPhiBins(60);
  const UInt_t  nPtBins(100);
  const UInt_t  nFracBins(100);
  const UInt_t  nPtFracBins(500);
  const UInt_t  nDiffBins(2000);
  const UInt_t  nErrBins(5000);
  const UInt_t  nXYVtxBins(1000);
  const UInt_t  nZVtxBins(1200);
  const UInt_t  nDVtxBins(2400);
  const Float_t rNHitBins[NRange]   = {0,     100};
  const Float_t rQualBins[NRange]   = {0.,    20.};
  const Float_t rDcaBins[NRange]    = {-100., 100.};
  const Float_t rEtaBins[NRange]    = {-2.,   2.};
  const Float_t rPhiBins[NRange]    = {-3.15, 3.15};
  const Float_t rPtBins[NRange]     = {0.,    100.};
  const Float_t rFracBins[NRange]   = {0.,    5.};
  const Float_t rPtFracBins[NRange] = {0.,    5.};
  const Float_t rDiffBins[NRange]   = {-100., 100.};     
  const Float_t rErrBins[NRange]    = {0.,    100.};
  const Float_t rXYVtxBins[NRange]  = {-1.,   1.};
  const Float_t rZVtxBins[NRange]   = {-300., 300.};
  const Float_t rDVtxBins[NRange]   = {-600., 600.};

  // for track-variable histogram names
  TString sTrkVar[NType][NTrkVar];
  TString sTrkVarDiff[NType][NTrkVar];
  TString sTrkVarFrac[NType][NTrkVar];
  TString sTrkVarVsNTpc[NType][NTrkVar];
  TString sTrkVarVsDcaXY[NType][NTrkVar];
  TString sTrkVarVsDcaZ[NType][NTrkVar];
  TString sTrkVarVsPtReco[NType][NTrkVar];
  TString sTrkVarVsPtTrue[NType][NTrkVar];
  TString sTrkVarVsPtFrac[NType][NTrkVar];

  // for physics-variable histogram names
  TString sPhysVar[NType][NPhysVar];
  TString sPhysVarDiff[NType][NPhysVar];
  TString sPhysVarFrac[NType][NPhysVar];
  TString sPhysVarVsNTpc[NType][NPhysVar];
  TString sPhysVarVsDcaXY[NType][NPhysVar];
  TString sPhysVarVsDcaZ[NType][NPhysVar];
  TString sPhysVarVsPtReco[NType][NPhysVar];
  TString sPhysVarVsPtTrue[NType][NPhysVar];
  TString sPhysVarVsPtFrac[NType][NPhysVar];

  // form histogram names
  const TString sDiffSuffix("Diff");
  const TString sFracSuffix("Frac");
  const TString sVsNTpcSuffix("VsNTpc");
  const TString sVsDcaXySuffix("VsDcaXY");
  const TString sVsDcaZSuffix("VsDcaZ");
  const TString sVsPtRecoSuffix("VsPtReco");
  const TString sVsPtTrueSuffix("VsPtTrue");
  const TString sVsPtFracSuffix("VsPtFrac");

  // construct variable prefixes
  TString sTrkVarName[NTrkVar];
  TString sPhysVarName[NPhysVar];
  for (size_t iTrkVar = 0; iTrkVar < NTrkVar; iTrkVar++) {
    sTrkVarName[iTrkVar] = "h";
    sTrkVarName[iTrkVar].Append(sTrkVars[iTrkVar].Data());
  }
  for (size_t iPhysVar = 0; iPhysVar < NPhysVar; iPhysVar++) {
    sPhysVarName[iPhysVar] = "h";
    sPhysVarName[iPhysVar].Append(sPhysVars[iPhysVar].Data());
  }

  // construct type suffixes
  TString sTypeSuffix[NType];
  for (size_t iType = 0; iType < NType; iType++) {
    sTypeSuffix[iType] = "_";
    sTypeSuffix[iType].Append(sTrkNames[iType].Data());
  }

  for (size_t iType = 0; iType < NType; iType++) {
    for (size_t iTrkVar = 0; iTrkVar < NTrkVar; iTrkVar++) {
      sTrkVar[iType][iTrkVar]         = sTrkVarName[iTrkVar].Data();
      sTrkVarDiff[iType][iTrkVar]     = sTrkVarName[iTrkVar].Data();
      sTrkVarFrac[iType][iTrkVar]     = sTrkVarName[iTrkVar].Data();
      sTrkVarVsNTpc[iType][iTrkVar]   = sTrkVarName[iTrkVar].Data();
      sTrkVarVsDcaXY[iType][iTrkVar]  = sTrkVarName[iTrkVar].Data();
      sTrkVarVsDcaZ[iType][iTrkVar]   = sTrkVarName[iTrkVar].Data();
      sTrkVarVsPtReco[iType][iTrkVar] = sTrkVarName[iTrkVar].Data();
      sTrkVarVsPtTrue[iType][iTrkVar] = sTrkVarName[iTrkVar].Data();
      sTrkVarVsPtFrac[iType][iTrkVar] = sTrkVarName[iTrkVar].Data();
      sTrkVarDiff[iType][iTrkVar].Append(sDiffSuffix.Data());
      sTrkVarFrac[iType][iTrkVar].Append(sFracSuffix.Data());
      sTrkVarVsNTpc[iType][iTrkVar].Append(sVsNTpcSuffix.Data());
      sTrkVarVsDcaXY[iType][iTrkVar].Append(sVsDcaXySuffix.Data());
      sTrkVarVsDcaZ[iType][iTrkVar].Append(sVsDcaZSuffix.Data());
      sTrkVarVsPtReco[iType][iTrkVar].Append(sVsPtRecoSuffix.Data());
      sTrkVarVsPtTrue[iType][iTrkVar].Append(sVsPtTrueSuffix.Data());
      sTrkVarVsPtFrac[iType][iTrkVar].Append(sVsPtFracSuffix.Data());
      sTrkVar[iType][iTrkVar].Append(sTypeSuffix[iType].Data());
      sTrkVarDiff[iType][iTrkVar].Append(sTypeSuffix[iType].Data());
      sTrkVarFrac[iType][iTrkVar].Append(sTypeSuffix[iType].Data());
      sTrkVarVsNTpc[iType][iTrkVar].Append(sTypeSuffix[iType].Data());
      sTrkVarVsDcaXY[iType][iTrkVar].Append(sTypeSuffix[iType].Data());
      sTrkVarVsDcaZ[iType][iTrkVar].Append(sTypeSuffix[iType].Data());
      sTrkVarVsPtReco[iType][iTrkVar].Append(sTypeSuffix[iType].Data());
      sTrkVarVsPtTrue[iType][iTrkVar].Append(sTypeSuffix[iType].Data());
      sTrkVarVsPtFrac[iType][iTrkVar].Append(sTypeSuffix[iType].Data());
    }
    for (size_t iPhysVar = 0; iPhysVar < NPhysVar; iPhysVar++) {
      sPhysVar[iType][iPhysVar]         = sPhysVarName[iPhysVar].Data();
      sPhysVarDiff[iType][iPhysVar]     = sPhysVarName[iPhysVar].Data();
      sPhysVarFrac[iType][iPhysVar]     = sPhysVarName[iPhysVar].Data();
      sPhysVarVsNTpc[iType][iPhysVar]   = sPhysVarName[iPhysVar].Data();
      sPhysVarVsDcaXY[iType][iPhysVar]  = sPhysVarName[iPhysVar].Data();
      sPhysVarVsDcaZ[iType][iPhysVar]   = sPhysVarName[iPhysVar].Data();
      sPhysVarVsPtReco[iType][iPhysVar] = sPhysVarName[iPhysVar].Data();
      sPhysVarVsPtTrue[iType][iPhysVar] = sPhysVarName[iPhysVar].Data();
      sPhysVarVsPtFrac[iType][iPhysVar] = sPhysVarName[iPhysVar].Data();
      sPhysVarDiff[iType][iPhysVar].Append(sDiffSuffix.Data());
      sPhysVarFrac[iType][iPhysVar].Append(sFracSuffix.Data());
      sPhysVarVsNTpc[iType][iPhysVar].Append(sVsNTpcSuffix.Data());
      sPhysVarVsDcaXY[iType][iPhysVar].Append(sVsDcaXySuffix.Data());
      sPhysVarVsDcaZ[iType][iPhysVar].Append(sVsDcaZSuffix.Data());
      sPhysVarVsPtReco[iType][iPhysVar].Append(sVsPtRecoSuffix.Data());
      sPhysVarVsPtTrue[iType][iPhysVar].Append(sVsPtTrueSuffix.Data());
      sPhysVarVsPtFrac[iType][iPhysVar].Append(sVsPtFracSuffix.Data());
      sPhysVar[iType][iPhysVar].Append(sTypeSuffix[iType].Data());
      sPhysVarDiff[iType][iPhysVar].Append(sTypeSuffix[iType].Data());
      sPhysVarFrac[iType][iPhysVar].Append(sTypeSuffix[iType].Data());
      sPhysVarVsNTpc[iType][iPhysVar].Append(sTypeSuffix[iType].Data());
      sPhysVarVsDcaXY[iType][iPhysVar].Append(sTypeSuffix[iType].Data());
      sPhysVarVsDcaZ[iType][iPhysVar].Append(sTypeSuffix[iType].Data());
      sPhysVarVsPtReco[iType][iPhysVar].Append(sTypeSuffix[iType].Data());
      sPhysVarVsPtTrue[iType][iPhysVar].Append(sTypeSuffix[iType].Data());
      sPhysVarVsPtFrac[iType][iPhysVar].Append(sTypeSuffix[iType].Data());
    }
  }  // end type loop

  // no. of track bins
  const UInt_t nTrkBins[NTrkVar]     = {nXYVtxBins, nXYVtxBins, nZVtxBins, nNHitBins, nNHitBins, nNHitBins, nNHitBins, nQualBins, nDcaBins,  nDcaBins,
                                        nErrBins,   nErrBins,   nNHitBins, nNHitBins};
  const UInt_t nTrkDiffBins[NTrkVar] = {nDVtxBins,  nDVtxBins,  nDVtxBins, nDiffBins, nDiffBins, nDiffBins, nDiffBins, nDiffBins, nDiffBins, nDiffBins,
                                        nDiffBins,  nDiffBins,  nDiffBins, nDiffBins};
  const UInt_t nTrkFracBins[NTrkVar] = {nFracBins,  nFracBins,  nFracBins, nFracBins, nFracBins, nFracBins, nFracBins, nFracBins, nFracBins, nFracBins,
                                        nFracBins,  nFracBins,  nFracBins, nFracBins};

  // no. of physics bins
  const UInt_t nPhysBins[NPhysVar]     = {nPhiBins,   nEtaBins,   nPtBins,     nErrBins,  nErrBins,  nErrBins};
  const UInt_t nPhysDiffBins[NPhysVar] = {nDiffBins,  nDiffBins,  nDiffBins,   nDiffBins, nDiffBins, nDiffBins};
  const UInt_t nPhysFracBins[NPhysVar] = {nFracBins,  nFracBins,  nPtFracBins, nFracBins, nFracBins, nFracBins};

  // track axis ranges
  const Float_t rTrkBins[NTrkVar][NRange]     = {{rXYVtxBins[0], rXYVtxBins[1]}, {rXYVtxBins[0], rXYVtxBins[1]}, {rZVtxBins[0], rZVtxBins[1]},
                                                 {rNHitBins[0],  rNHitBins[1]},  {rNHitBins[0],  rNHitBins[1]},  {rNHitBins[0], rNHitBins[1]},
                                                 {rNHitBins[0],  rNHitBins[1]},  {rQualBins[0],  rQualBins[1]},  {rDcaBins[0],  rDcaBins[1]},
                                                 {rDcaBins[0],   rDcaBins[1]},   {rErrBins[0],   rErrBins[1]},   {rErrBins[0],  rErrBins[1]},
                                                 {rNHitBins[0],  rNHitBins[1]},  {rNHitBins[0],  rNHitBins[1]}};
  const Float_t rTrkDiffBins[NTrkVar][NRange] = {{rDVtxBins[0],  rDVtxBins[1]},  {rDVtxBins[0],  rDVtxBins[1]},  {rDiffBins[0], rDiffBins[1]},
                                                 {rDiffBins[0],  rDiffBins[1]},  {rDiffBins[0],  rDiffBins[1]},  {rDiffBins[0], rDiffBins[1]},
                                                 {rDiffBins[0],  rDiffBins[1]},  {rDiffBins[0],  rDiffBins[1]},  {rDiffBins[0], rDiffBins[1]},
                                                 {rDiffBins[0],  rDiffBins[1]},  {rDiffBins[0],  rDiffBins[1]},  {rDiffBins[0], rDiffBins[1]},
                                                 {rDiffBins[0],  rDiffBins[1]},  {rDiffBins[0],  rDiffBins[1]}};
  const Float_t rTrkFracBins[NTrkVar][NRange] = {{rFracBins[0],  rFracBins[1]},  {rFracBins[0],  rFracBins[1]},  {rFracBins[0], rFracBins[1]},
                                                 {rFracBins[0],  rFracBins[1]},  {rFracBins[0],  rFracBins[1]},  {rFracBins[0], rFracBins[1]},
                                                 {rFracBins[0],  rFracBins[1]},  {rFracBins[0],  rFracBins[1]},  {rFracBins[0], rFracBins[1]},
                                                 {rFracBins[0],  rFracBins[1]},  {rFracBins[0],  rFracBins[1]},  {rFracBins[0], rFracBins[1]},
                                                 {rFracBins[0],  rFracBins[1]},  {rFracBins[0],  rFracBins[1]}};

  // physics axis ranges
  const Float_t rPhysBins[NPhysVar][NRange]     = {{rPhiBins[0],  rPhiBins[1]},  {rEtaBins[0],  rEtaBins[1]},  {rPtBins[0],     rPtBins[1]},
                                                   {rErrBins[0],  rErrBins[1]},  {rErrBins[0],  rErrBins[1]},  {rErrBins[0],    rErrBins[1]}};
  const Float_t rPhysDiffBins[NPhysVar][NRange] = {{rDiffBins[0], rDiffBins[1]}, {rDiffBins[0], rDiffBins[1]}, {rDiffBins[0],   rDiffBins[1]},
                                                   {rDiffBins[0], rDiffBins[1]}, {rDiffBins[0], rDiffBins[1]}, {rDiffBins[0],   rDiffBins[1]}};
  const Float_t rPhysFracBins[NPhysVar][NRange] = {{rFracBins[0], rFracBins[1]}, {rFracBins[0], rFracBins[1]}, {rPtFracBins[0], rPtFracBins[1]},
                                                   {rFracBins[0], rFracBins[1]}, {rFracBins[0], rFracBins[1]}, {rPtFracBins[0], rPtFracBins[1]}};

  // initialize histograms
  for (int iType = 0; iType < NType; iType++) {

    // check if histograms should be initialized
    if (isBeforeCuts[iType] || isPileup[iType]) {
      if (isBeforeCuts[iType] && !doBeforeCuts) continue;
      if (isPileup[iType]     && !doPileup)     continue;
    }

    for (size_t iTrkVar = 0; iTrkVar < NTrkVar; iTrkVar++) {
      hTrkVar[iType][iTrkVar]         = new TH1D(sTrkVar[iType][iTrkVar].Data(),         "", nTrkBins[iTrkVar],     rTrkBins[iTrkVar][0],     rTrkBins[iTrkVar][1]);
      hTrkVarDiff[iType][iTrkVar]     = new TH1D(sTrkVarDiff[iType][iTrkVar].Data(),     "", nTrkDiffBins[iTrkVar], rTrkDiffBins[iTrkVar][0], rTrkDiffBins[iTrkVar][1]);
      hTrkVarFrac[iType][iTrkVar]     = new TH1D(sTrkVarFrac[iType][iTrkVar].Data(),     "", nTrkFracBins[iTrkVar], rTrkFracBins[iTrkVar][0], rTrkFracBins[iTrkVar][1]);
      hTrkVarVsNTpc[iType][iTrkVar]   = new TH2D(sTrkVarVsNTpc[iType][iTrkVar].Data(),   "", nNHitBins,             rNHitBins[0],             rNHitBins[1],   nTrkBins[iTrkVar], rTrkBins[iTrkVar][0], rTrkBins[iTrkVar][1]);
      hTrkVarVsDcaXY[iType][iTrkVar]  = new TH2D(sTrkVarVsDcaXY[iType][iTrkVar].Data(),  "", nDcaBins,              rDcaBins[0],              rDcaBins[1],    nTrkBins[iTrkVar], rTrkBins[iTrkVar][0], rTrkBins[iTrkVar][1]);
      hTrkVarVsDcaZ[iType][iTrkVar]   = new TH2D(sTrkVarVsDcaZ[iType][iTrkVar].Data(),   "", nDcaBins,              rDcaBins[0],              rDcaBins[1],    nTrkBins[iTrkVar], rTrkBins[iTrkVar][0], rTrkBins[iTrkVar][1]);
      hTrkVarVsPtReco[iType][iTrkVar] = new TH2D(sTrkVarVsPtReco[iType][iTrkVar].Data(), "", nPtBins,               rPtBins[0],               rPtBins[1],     nTrkBins[iTrkVar], rTrkBins[iTrkVar][0], rTrkBins[iTrkVar][1]);
      hTrkVarVsPtTrue[iType][iTrkVar] = new TH2D(sTrkVarVsPtTrue[iType][iTrkVar].Data(), "", nPtBins,               rPtBins[0],               rPtBins[1],     nTrkBins[iTrkVar], rTrkBins[iTrkVar][0], rTrkBins[iTrkVar][1]);
      hTrkVarVsPtFrac[iType][iTrkVar] = new TH2D(sTrkVarVsPtFrac[iType][iTrkVar].Data(), "", nPtFracBins,           rPtFracBins[0],           rPtFracBins[1], nTrkBins[iTrkVar], rTrkBins[iTrkVar][0], rTrkBins[iTrkVar][1]);
      hTrkVar[iType][iTrkVar]         -> Sumw2();
      hTrkVarDiff[iType][iTrkVar]     -> Sumw2();
      hTrkVarFrac[iType][iTrkVar]     -> Sumw2();
      hTrkVarVsNTpc[iType][iTrkVar]   -> Sumw2();
      hTrkVarVsDcaXY[iType][iTrkVar]  -> Sumw2();
      hTrkVarVsDcaZ[iType][iTrkVar]   -> Sumw2();
      hTrkVarVsPtReco[iType][iTrkVar] -> Sumw2();
      hTrkVarVsPtTrue[iType][iTrkVar] -> Sumw2();
      hTrkVarVsPtFrac[iType][iTrkVar] -> Sumw2();
    }
    for (size_t iPhysVar = 0; iPhysVar < NPhysVar; iPhysVar++) {
      hPhysVar[iType][iPhysVar]         = new TH1D(sPhysVar[iType][iPhysVar].Data(),         "", nPhysBins[iPhysVar],     rPhysBins[iPhysVar][0],     rPhysBins[iPhysVar][1]);
      hPhysVarDiff[iType][iPhysVar]     = new TH1D(sPhysVarDiff[iType][iPhysVar].Data(),     "", nPhysDiffBins[iPhysVar], rPhysDiffBins[iPhysVar][0], rPhysDiffBins[iPhysVar][1]);
      hPhysVarFrac[iType][iPhysVar]     = new TH1D(sPhysVarFrac[iType][iPhysVar].Data(),     "", nPhysFracBins[iPhysVar], rPhysFracBins[iPhysVar][0], rPhysFracBins[iPhysVar][1]);
      hPhysVarVsNTpc[iType][iPhysVar]   = new TH2D(sPhysVarVsNTpc[iType][iPhysVar].Data(),   "", nNHitBins,               rNHitBins[0],               rNHitBins[1],   nPhysBins[iPhysVar], rPhysBins[iPhysVar][0], rPhysBins[iPhysVar][1]);
      hPhysVarVsDcaXY[iType][iPhysVar]  = new TH2D(sPhysVarVsDcaXY[iType][iPhysVar].Data(),  "", nDcaBins,                rDcaBins[0],                rDcaBins[1],    nPhysBins[iPhysVar], rPhysBins[iPhysVar][0], rPhysBins[iPhysVar][1]);
      hPhysVarVsDcaZ[iType][iPhysVar]   = new TH2D(sPhysVarVsDcaZ[iType][iPhysVar].Data(),   "", nDcaBins,                rDcaBins[0],                rDcaBins[1],    nPhysBins[iPhysVar], rPhysBins[iPhysVar][0], rPhysBins[iPhysVar][1]);
      hPhysVarVsPtReco[iType][iPhysVar] = new TH2D(sPhysVarVsPtReco[iType][iPhysVar].Data(), "", nPtBins,                 rPtBins[0],                 rPtBins[1],     nPhysBins[iPhysVar], rPhysBins[iPhysVar][0], rPhysBins[iPhysVar][1]);
      hPhysVarVsPtTrue[iType][iPhysVar] = new TH2D(sPhysVarVsPtTrue[iType][iPhysVar].Data(), "", nPtBins,                 rPtBins[0],                 rPtBins[1],     nPhysBins[iPhysVar], rPhysBins[iPhysVar][0], rPhysBins[iPhysVar][1]);
      hPhysVarVsPtFrac[iType][iPhysVar] = new TH2D(sPhysVarVsPtFrac[iType][iPhysVar].Data(), "", nPtFracBins,             rPtFracBins[0],             rPtFracBins[1], nPhysBins[iPhysVar], rPhysBins[iPhysVar][0], rPhysBins[iPhysVar][1]);
      hPhysVar[iType][iPhysVar]         -> Sumw2();
      hPhysVarDiff[iType][iPhysVar]     -> Sumw2();
      hPhysVarFrac[iType][iPhysVar]     -> Sumw2();
      hPhysVarVsNTpc[iType][iPhysVar]   -> Sumw2();
      hPhysVarVsDcaXY[iType][iPhysVar]  -> Sumw2();
      hPhysVarVsDcaZ[iType][iPhysVar]   -> Sumw2();
      hPhysVarVsPtReco[iType][iPhysVar] -> Sumw2();
      hPhysVarVsPtTrue[iType][iPhysVar] -> Sumw2();
      hPhysVarVsPtFrac[iType][iPhysVar] -> Sumw2();
    }
  }
  cout << "      Initialized output histograms." << endl;
  return;

}  // end 'InitHits()'



void STrackCutStudy::NormalizeHists() {

  for (int iType = 0; iType < NType; iType++) {

    // check if histograms should be normalized
    if (isBeforeCuts[iType] || isPileup[iType]) {
      if (isBeforeCuts[iType] && !doBeforeCuts) continue;
      if (isPileup[iType]     && !doPileup)     continue;
    }

    for (size_t iTrkVar = 0; iTrkVar < NTrkVar; iTrkVar++) {
      const Double_t intTrkVar         = hTrkVar[iType][iTrkVar]         -> Integral();
      const Double_t intTrkVarDiff     = hTrkVarDiff[iType][iTrkVar]     -> Integral();
      const Double_t intTrkVarFrac     = hTrkVarFrac[iType][iTrkVar]     -> Integral();
      const Double_t intTrkVarVsNTpc   = hTrkVarVsNTpc[iType][iTrkVar]   -> Integral();
      const Double_t intTrkVarVsDcaXY  = hTrkVarVsDcaXY[iType][iTrkVar]  -> Integral();
      const Double_t intTrkVarVsDcaZ   = hTrkVarVsDcaZ[iType][iTrkVar]   -> Integral();
      const Double_t intTrkVarVsPtReco = hTrkVarVsPtReco[iType][iTrkVar] -> Integral();
      const Double_t intTrkVarVsPtTrue = hTrkVarVsPtTrue[iType][iTrkVar] -> Integral();
      const Double_t intTrkVarVsPtFrac = hTrkVarVsPtFrac[iType][iTrkVar] -> Integral();
      if (intTrkVar         > 0.) hTrkVar[iType][iTrkVar]         -> Scale(1. / intTrkVar);
      if (intTrkVarDiff     > 0.) hTrkVarDiff[iType][iTrkVar]     -> Scale(1. / intTrkVarDiff);
      if (intTrkVarFrac     > 0.) hTrkVarFrac[iType][iTrkVar]     -> Scale(1. / intTrkVarFrac);
      if (intTrkVarVsNTpc   > 0.) hTrkVarVsNTpc[iType][iTrkVar]   -> Scale(1. / intTrkVarVsNTpc);
      if (intTrkVarVsDcaXY  > 0.) hTrkVarVsDcaXY[iType][iTrkVar]  -> Scale(1. / intTrkVarVsDcaXY);
      if (intTrkVarVsDcaZ   > 0.) hTrkVarVsDcaZ[iType][iTrkVar]   -> Scale(1. / intTrkVarVsDcaZ);
      if (intTrkVarVsPtReco > 0.) hTrkVarVsPtReco[iType][iTrkVar] -> Scale(1. / intTrkVarVsPtReco);
      if (intTrkVarVsPtTrue > 0.) hTrkVarVsPtTrue[iType][iTrkVar] -> Scale(1. / intTrkVarVsPtTrue);
      if (intTrkVarVsPtFrac > 0.) hTrkVarVsPtFrac[iType][iTrkVar] -> Scale(1. / intTrkVarVsPtFrac);
    }
    for (size_t iPhysVar = 0; iPhysVar < NPhysVar; iPhysVar++) {
      const Double_t intPhysVar         = hPhysVar[iType][iPhysVar]         -> Integral();
      const Double_t intPhysVarDiff     = hPhysVarDiff[iType][iPhysVar]     -> Integral();
      const Double_t intPhysVarFrac     = hPhysVarFrac[iType][iPhysVar]     -> Integral();
      const Double_t intPhysVarVsNTpc   = hPhysVarVsNTpc[iType][iPhysVar]   -> Integral();
      const Double_t intPhysVarVsDcaXY  = hPhysVarVsDcaXY[iType][iPhysVar]  -> Integral();
      const Double_t intPhysVarVsDcaZ   = hPhysVarVsDcaZ[iType][iPhysVar]   -> Integral();
      const Double_t intPhysVarVsPtReco = hPhysVarVsPtReco[iType][iPhysVar] -> Integral();
      const Double_t intPhysVarVsPtTrue = hPhysVarVsPtTrue[iType][iPhysVar] -> Integral();
      const Double_t intPhysVarVsPtFrac = hPhysVarVsPtFrac[iType][iPhysVar] -> Integral();
      if (intPhysVar         > 0.) hPhysVar[iType][iPhysVar]         -> Scale(1. / intPhysVar);
      if (intPhysVarDiff     > 0.) hPhysVarDiff[iType][iPhysVar]     -> Scale(1. / intPhysVarDiff);
      if (intPhysVarFrac     > 0.) hPhysVarFrac[iType][iPhysVar]     -> Scale(1. / intPhysVarFrac);
      if (intPhysVarVsNTpc   > 0.) hPhysVarVsNTpc[iType][iPhysVar]   -> Scale(1. / intPhysVarVsNTpc);
      if (intPhysVarVsDcaXY  > 0.) hPhysVarVsDcaXY[iType][iPhysVar]  -> Scale(1. / intPhysVarVsDcaXY);
      if (intPhysVarVsDcaZ   > 0.) hPhysVarVsDcaZ[iType][iPhysVar]   -> Scale(1. / intPhysVarVsDcaZ);
      if (intPhysVarVsPtReco > 0.) hPhysVarVsPtReco[iType][iPhysVar] -> Scale(1. / intPhysVarVsPtReco);
      if (intPhysVarVsPtTrue > 0.) hPhysVarVsPtTrue[iType][iPhysVar] -> Scale(1. / intPhysVarVsPtTrue);
      if (intPhysVarVsPtFrac > 0.) hPhysVarVsPtFrac[iType][iPhysVar] -> Scale(1. / intPhysVarVsPtFrac);
    }
  }
  cout << "      Normalized histograms." << endl;
  return;

}  // end 'NormalizeHists()'



void STrackCutStudy::SetHistStyles() {

  // plot parameters
  const UInt_t  fFil(0);
  const UInt_t  fLin(1);
  const UInt_t  fMar2D(1);
  const Float_t fOffX(1.0);
  const Float_t fOffY(1.2); 
  const Float_t fOffZ(1.0);

  // select count label to use
  TString sCountToUse("");
  if (doIntNorm) {
    sCountToUse = "arbitrary units";
  } else {
    sCountToUse = "counts";
  } 

  // track axis titles
  const TString sTrkNMms("N_{layer}^{MMS}");
  const TString sTrkNMap("N_{layer}^{MAPS}");
  const TString sTrkNInt("N_{layer}^{INTT}");
  const TString sTrkNTpc("N_{layer}^{TPC}");
  const TString sTrkQuality("#chi^{2}/ndf");
  const TString sTrkDCAxy("DCA_{xy} [#mum]");
  const TString sTrkDCAz("DCA_{z} [#mum]");
  const TString sDeltaDCAxy("#DeltaDCA_{xy} / DCA_{xy}");
  const TString sDeltaDCAz("#DeltaDCA_{z} / DCA_{z}");
  const TString sTrkVx("v_{x} [cm]");
  const TString sTrkVy("v_{y} [cm]");
  const TString sTrkVz("v_{z} [cm]");
  const TString sTrkPhi("#phi");
  const TString sTrkEta("#eta");
  const TString sTrkPt("p_{T} [GeV/c]");
  const TString sTruPt("p_{T}^{truth} [GeV/c]");
  const TString sDeltaEta("#Delta#eta^{trk} / #eta^{trk}");
  const TString sDeltaPhi("#Delta#phi^{trk} / #phi^{trk}");
  const TString sDeltaPt("#Deltap_{T}^{trk} / p_{T}^{trk}");
  const TString sTrkNClust("N_{clust}");
  const TString sTrkAvgClust("<cluster size>");

  // difference axis titles
  const TString sDiffVx("v_{x}^{reco} - v_{x}^{truth}");
  const TString sDiffVy("v_{y}^{reco} - v_{y}^{truth}");
  const TString sDiffVz("v_{z}^{reco} - v_{z}^{truth}");
  const TString sDiffNMms("N_{layer/reco}^{MMS} - N_{layer/truth}^{MMS}");
  const TString sDiffNMap("N_{layer/reco}^{MAP} - N_{layer/truth}^{MAP}");
  const TString sDiffNInt("N_{layer/reco}^{INTT} - N_{layer/truth}^{INTT}");
  const TString sDiffNTpc("N_{layer/reco}^{TPC} - N_{layer/truth}^{TPC}");
  const TString sDiffQual("IRRELEVANT");
  const TString sDiffDCAxy("DCA_{xy}^{reco} - DCA_{xy}^{truth} [#mum]");
  const TString sDiffDCAz("DCA_{z}^{reco} - DCA_{z}^{truth} [#mum]");
  const TString sDiffDeltaDCAxy("IRRELEVANT");
  const TString sDiffDeltaDCAz("IRRELEVANT");
  const TString sDiffPhi("#phi^{reco} - #phi^{truth}");
  const TString sDiffEta("#eta^{reco} - #eta^{truth}");
  const TString sDiffPt("p_{T}^{reco} - p_{T}^{truth}");
  const TString sDiffDeltaPhi("IRRELEVANT");
  const TString sDiffDeltaEta("IRRELEVANT");
  const TString sDiffDeltaPt("IRRELEVANT");
  const TString sDiffNClust("N_{clust}^{reco} - N_{clust}^{truth}");
  const TString sDiffAvgClust("<cluster size>_{reco} - <cluster size>_{truth}");

  // fraction axis titles
  const TString sFracVx("v_{x}^{reco} / v_{x}^{truth}");
  const TString sFracVy("v_{y}^{reco} / v_{y}^{truth}");
  const TString sFracVz("v_{z}^{reco} / v_{z}^{truth}");
  const TString sFracMms("N_{layer/reco}^{MMS} / N_{layer/truth}^{MMS}");
  const TString sFracMap("N_{layer/reco}^{MAPS} / N_{layer/truth}^{MAPS}");
  const TString sFracInt("N_{layer/reco}^{INTT} / N_{layer/truth}^{INTT}");
  const TString sFracTpc("N_{layer/reco}^{TPC} / N_{layer/truth}^{TPC}");
  const TString sFracTot("N_{layer/reco}^{tot} / N_{layer/truth}^{tot}");
  const TString sFracQual("IRRELEVANT");
  const TString sFracDCAxy("DCA_{xy}^{reco} / DCA_{xy}^{truth}");
  const TString sFracDCAz("DCA_{z}^{reco} / DCA_{z}^{truth}");
  const TString sFracDeltaDCAxy("IRRELEVANT");
  const TString sFracDeltaDCAz("IRRELEVANT");
  const TString sFracPhi("#delta#phi^{trk} = #phi^{trk} / #phi^{truth}");
  const TString sFracEta("#delta#eta^{trk} = #eta^{trk} / #eta^{truth}");
  const TString sFracPt("#deltap_{T}^{trk} = p_{T}^{trk} / p_{T}^{truth}");
  const TString sFracDeltaPhi("IRRELEVANT");
  const TString sFracDeltaEta("IRRELEVANT");
  const TString sFracDeltaPt("IRRELEVANT");
  const TString sFracNClust("N_{clust}^{reco} / N_{clust}^{truth}");
  const TString sFracAvgClust("<cluster size>_{reco} / <cluster size>_{truth}");

  // track axis titles
  const TString sTrkTitles[NTrkVar]     = {sTrkVx,          sTrkVy,         sTrkVz,      sTrkNMms,   sTrkNMap,  sTrkNInt,  sTrkNTpc,  sTrkQuality, sTrkDCAxy,  sTrkDCAz,
                                           sDeltaDCAxy,     sDeltaDCAz,     sTrkNClust,  sTrkAvgClust};
  const TString sTrkDiffTitles[NTrkVar] = {sDiffVx,         sDiffVy,        sDiffVz,     sDiffNMms,  sDiffNMap, sDiffNInt, sDiffNTpc, sDiffQual,   sDiffDCAxy, sDiffDCAz,
                                           sDiffDeltaDCAxy, sDiffDeltaDCAz, sDiffNClust, sDiffAvgClust};
  const TString sTrkFracTitles[NTrkVar] = {sFracVx,         sFracVy,        sFracVz,     sFracMms,   sFracMap,  sFracInt,  sFracTpc,  sFracQual,   sTrkDCAxy,  sTrkDCAz,
                                           sFracDeltaDCAxy, sFracDeltaDCAz, sFracNClust, sFracAvgClust};

  // physics axis titles
  const TString sPhysTitles[NPhysVar]     = {sTrkPhi,  sTrkEta,  sTrkPt,  sDeltaPhi,     sDeltaEta,     sDeltaPt};
  const TString sPhysDiffTitles[NPhysVar] = {sDiffPhi, sDiffEta, sDiffPt, sDiffDeltaPhi, sDiffDeltaEta, sDiffDeltaPt};
  const TString sPhysFracTitles[NPhysVar] = {sFracPhi, sFracEta, sFracPt, sFracDeltaPhi, sFracDeltaEta, sFracDeltaPt};

  for (Int_t iType = 0; iType < NType; iType++) {

    // check if histograms should be styled
    if (isBeforeCuts[iType] || isPileup[iType]) {
      if (isBeforeCuts[iType] && !doBeforeCuts) continue;
      if (isPileup[iType]     && !doPileup)     continue;
    }

    for (Int_t iTrkVar = 0; iTrkVar < NTrkVar; iTrkVar++) {
      hTrkVar[iType][iTrkVar]         -> SetMarkerColor(fTypeCol[iType]);
      hTrkVar[iType][iTrkVar]         -> SetMarkerStyle(fTypeMar[iType]);
      hTrkVar[iType][iTrkVar]         -> SetLineColor(fTypeCol[iType]);
      hTrkVar[iType][iTrkVar]         -> SetLineStyle(fLin);
      hTrkVar[iType][iTrkVar]         -> SetFillColor(fTypeCol[iType]);
      hTrkVar[iType][iTrkVar]         -> SetFillStyle(fFil);
      hTrkVar[iType][iTrkVar]         -> SetTitleFont(FTxt);
      hTrkVar[iType][iTrkVar]         -> GetXaxis() -> SetTitle(sTrkTitles[iTrkVar].Data());
      hTrkVar[iType][iTrkVar]         -> GetXaxis() -> SetTitleFont(FTxt);
      hTrkVar[iType][iTrkVar]         -> GetXaxis() -> SetTitleOffset(fOffX);
      hTrkVar[iType][iTrkVar]         -> GetYaxis() -> SetTitle(sCountToUse.Data());
      hTrkVar[iType][iTrkVar]         -> GetYaxis() -> SetTitleFont(FTxt);
      hTrkVar[iType][iTrkVar]         -> GetYaxis() -> SetTitleOffset(fOffY);
      hTrkVarDiff[iType][iTrkVar]     -> SetMarkerColor(fTypeCol[iType]);
      hTrkVarDiff[iType][iTrkVar]     -> SetMarkerStyle(fTypeMar[iType]);
      hTrkVarDiff[iType][iTrkVar]     -> SetLineColor(fTypeCol[iType]);
      hTrkVarDiff[iType][iTrkVar]     -> SetLineStyle(fLin);
      hTrkVarDiff[iType][iTrkVar]     -> SetFillColor(fTypeCol[iType]);
      hTrkVarDiff[iType][iTrkVar]     -> SetFillStyle(fFil);
      hTrkVarDiff[iType][iTrkVar]     -> SetTitleFont(FTxt);
      hTrkVarDiff[iType][iTrkVar]     -> GetXaxis() -> SetTitle(sTrkDiffTitles[iTrkVar].Data());
      hTrkVarDiff[iType][iTrkVar]     -> GetXaxis() -> SetTitleFont(FTxt);
      hTrkVarDiff[iType][iTrkVar]     -> GetXaxis() -> SetTitleOffset(fOffX);
      hTrkVarDiff[iType][iTrkVar]     -> GetYaxis() -> SetTitle(sCountToUse.Data());
      hTrkVarDiff[iType][iTrkVar]     -> GetYaxis() -> SetTitleFont(FTxt);
      hTrkVarDiff[iType][iTrkVar]     -> GetYaxis() -> SetTitleOffset(fOffY);
      hTrkVarFrac[iType][iTrkVar]     -> SetMarkerColor(fTypeCol[iType]);
      hTrkVarFrac[iType][iTrkVar]     -> SetMarkerStyle(fTypeMar[iType]);
      hTrkVarFrac[iType][iTrkVar]     -> SetLineColor(fTypeCol[iType]);
      hTrkVarFrac[iType][iTrkVar]     -> SetLineStyle(fLin);
      hTrkVarFrac[iType][iTrkVar]     -> SetFillColor(fTypeCol[iType]);
      hTrkVarFrac[iType][iTrkVar]     -> SetFillStyle(fFil);
      hTrkVarFrac[iType][iTrkVar]     -> SetTitleFont(FTxt);
      hTrkVarFrac[iType][iTrkVar]     -> GetXaxis() -> SetTitle(sTrkFracTitles[iTrkVar].Data());
      hTrkVarFrac[iType][iTrkVar]     -> GetXaxis() -> SetTitleFont(FTxt);
      hTrkVarFrac[iType][iTrkVar]     -> GetXaxis() -> SetTitleOffset(fOffX);
      hTrkVarFrac[iType][iTrkVar]     -> GetYaxis() -> SetTitle(sCountToUse.Data());
      hTrkVarFrac[iType][iTrkVar]     -> GetYaxis() -> SetTitleFont(FTxt);
      hTrkVarFrac[iType][iTrkVar]     -> GetYaxis() -> SetTitleOffset(fOffY);
      hTrkVarVsNTpc[iType][iTrkVar]   -> SetMarkerColor(fTypeCol[iType]);
      hTrkVarVsNTpc[iType][iTrkVar]   -> SetMarkerStyle(fMar2D);
      hTrkVarVsNTpc[iType][iTrkVar]   -> SetLineColor(fTypeCol[iType]);
      hTrkVarVsNTpc[iType][iTrkVar]   -> SetLineStyle(fLin);
      hTrkVarVsNTpc[iType][iTrkVar]   -> SetFillColor(fTypeCol[iType]);
      hTrkVarVsNTpc[iType][iTrkVar]   -> SetFillStyle(fFil);
      hTrkVarVsNTpc[iType][iTrkVar]   -> SetTitleFont(FTxt);
      hTrkVarVsNTpc[iType][iTrkVar]   -> GetXaxis() -> SetTitle(sTrkNTpc.Data());
      hTrkVarVsNTpc[iType][iTrkVar]   -> GetXaxis() -> SetTitleFont(FTxt);
      hTrkVarVsNTpc[iType][iTrkVar]   -> GetXaxis() -> SetTitleOffset(fOffX);
      hTrkVarVsNTpc[iType][iTrkVar]   -> GetYaxis() -> SetTitle(sTrkTitles[iTrkVar].Data());
      hTrkVarVsNTpc[iType][iTrkVar]   -> GetYaxis() -> SetTitleFont(FTxt);
      hTrkVarVsNTpc[iType][iTrkVar]   -> GetYaxis() -> SetTitleOffset(fOffY);
      hTrkVarVsNTpc[iType][iTrkVar]   -> GetZaxis() -> SetTitle(sCountToUse.Data());
      hTrkVarVsNTpc[iType][iTrkVar]   -> GetZaxis() -> SetTitleFont(FTxt);
      hTrkVarVsNTpc[iType][iTrkVar]   -> GetZaxis() -> SetTitleOffset(fOffZ);
      hTrkVarVsDcaXY[iType][iTrkVar]  -> SetMarkerColor(fTypeCol[iType]);
      hTrkVarVsDcaXY[iType][iTrkVar]  -> SetMarkerStyle(fMar2D);
      hTrkVarVsDcaXY[iType][iTrkVar]  -> SetLineColor(fTypeCol[iType]);
      hTrkVarVsDcaXY[iType][iTrkVar]  -> SetLineStyle(fLin);
      hTrkVarVsDcaXY[iType][iTrkVar]  -> SetFillColor(fTypeCol[iType]);
      hTrkVarVsDcaXY[iType][iTrkVar]  -> SetFillStyle(fFil);
      hTrkVarVsDcaXY[iType][iTrkVar]  -> SetTitleFont(FTxt);
      hTrkVarVsDcaXY[iType][iTrkVar]  -> GetXaxis() -> SetTitle(sTrkDCAxy.Data());
      hTrkVarVsDcaXY[iType][iTrkVar]  -> GetXaxis() -> SetTitleFont(FTxt);
      hTrkVarVsDcaXY[iType][iTrkVar]  -> GetXaxis() -> SetTitleOffset(fOffX);
      hTrkVarVsDcaXY[iType][iTrkVar]  -> GetYaxis() -> SetTitle(sTrkTitles[iTrkVar].Data());
      hTrkVarVsDcaXY[iType][iTrkVar]  -> GetYaxis() -> SetTitleFont(FTxt);
      hTrkVarVsDcaXY[iType][iTrkVar]  -> GetYaxis() -> SetTitleOffset(fOffY);
      hTrkVarVsDcaXY[iType][iTrkVar]  -> GetZaxis() -> SetTitle(sCountToUse.Data());
      hTrkVarVsDcaXY[iType][iTrkVar]  -> GetZaxis() -> SetTitleFont(FTxt);
      hTrkVarVsDcaXY[iType][iTrkVar]  -> GetZaxis() -> SetTitleOffset(fOffZ);
      hTrkVarVsDcaZ[iType][iTrkVar]   -> SetMarkerColor(fTypeCol[iType]);
      hTrkVarVsDcaZ[iType][iTrkVar]   -> SetMarkerStyle(fMar2D);
      hTrkVarVsDcaZ[iType][iTrkVar]   -> SetLineColor(fTypeCol[iType]);
      hTrkVarVsDcaZ[iType][iTrkVar]   -> SetLineStyle(fLin);
      hTrkVarVsDcaZ[iType][iTrkVar]   -> SetFillColor(fTypeCol[iType]);
      hTrkVarVsDcaZ[iType][iTrkVar]   -> SetFillStyle(fFil);
      hTrkVarVsDcaZ[iType][iTrkVar]   -> SetTitleFont(FTxt);
      hTrkVarVsDcaZ[iType][iTrkVar]   -> GetXaxis() -> SetTitle(sTrkDCAz.Data());
      hTrkVarVsDcaZ[iType][iTrkVar]   -> GetXaxis() -> SetTitleFont(FTxt);
      hTrkVarVsDcaZ[iType][iTrkVar]   -> GetXaxis() -> SetTitleOffset(fOffX);
      hTrkVarVsDcaZ[iType][iTrkVar]   -> GetYaxis() -> SetTitle(sTrkTitles[iTrkVar].Data());
      hTrkVarVsDcaZ[iType][iTrkVar]   -> GetYaxis() -> SetTitleFont(FTxt);
      hTrkVarVsDcaZ[iType][iTrkVar]   -> GetYaxis() -> SetTitleOffset(fOffY);
      hTrkVarVsDcaZ[iType][iTrkVar]   -> GetZaxis() -> SetTitle(sCountToUse.Data());
      hTrkVarVsDcaZ[iType][iTrkVar]   -> GetZaxis() -> SetTitleFont(FTxt);
      hTrkVarVsDcaZ[iType][iTrkVar]   -> GetZaxis() -> SetTitleOffset(fOffZ);
      hTrkVarVsPtReco[iType][iTrkVar] -> SetMarkerColor(fTypeCol[iType]);
      hTrkVarVsPtReco[iType][iTrkVar] -> SetMarkerStyle(fMar2D);
      hTrkVarVsPtReco[iType][iTrkVar] -> SetLineColor(fTypeCol[iType]);
      hTrkVarVsPtReco[iType][iTrkVar] -> SetLineStyle(fLin);
      hTrkVarVsPtReco[iType][iTrkVar] -> SetFillColor(fTypeCol[iType]);
      hTrkVarVsPtReco[iType][iTrkVar] -> SetFillStyle(fFil);
      hTrkVarVsPtReco[iType][iTrkVar] -> SetTitleFont(FTxt);
      hTrkVarVsPtReco[iType][iTrkVar] -> GetXaxis() -> SetTitle(sTrkPt.Data());
      hTrkVarVsPtReco[iType][iTrkVar] -> GetXaxis() -> SetTitleFont(FTxt);
      hTrkVarVsPtReco[iType][iTrkVar] -> GetXaxis() -> SetTitleOffset(fOffX);
      hTrkVarVsPtReco[iType][iTrkVar] -> GetYaxis() -> SetTitle(sTrkTitles[iTrkVar].Data());
      hTrkVarVsPtReco[iType][iTrkVar] -> GetYaxis() -> SetTitleFont(FTxt);
      hTrkVarVsPtReco[iType][iTrkVar] -> GetYaxis() -> SetTitleOffset(fOffY);
      hTrkVarVsPtReco[iType][iTrkVar] -> GetZaxis() -> SetTitle(sCountToUse.Data());
      hTrkVarVsPtReco[iType][iTrkVar] -> GetZaxis() -> SetTitleFont(FTxt);
      hTrkVarVsPtReco[iType][iTrkVar] -> GetZaxis() -> SetTitleOffset(fOffZ);
      hTrkVarVsPtTrue[iType][iTrkVar] -> SetMarkerColor(fTypeCol[iType]);
      hTrkVarVsPtTrue[iType][iTrkVar] -> SetMarkerStyle(fMar2D);
      hTrkVarVsPtTrue[iType][iTrkVar] -> SetLineColor(fTypeCol[iType]);
      hTrkVarVsPtTrue[iType][iTrkVar] -> SetLineStyle(fLin);
      hTrkVarVsPtTrue[iType][iTrkVar] -> SetFillColor(fTypeCol[iType]);
      hTrkVarVsPtTrue[iType][iTrkVar] -> SetFillStyle(fFil);
      hTrkVarVsPtTrue[iType][iTrkVar] -> SetTitleFont(FTxt);
      hTrkVarVsPtTrue[iType][iTrkVar] -> GetXaxis() -> SetTitle(sTruPt.Data());
      hTrkVarVsPtTrue[iType][iTrkVar] -> GetXaxis() -> SetTitleFont(FTxt);
      hTrkVarVsPtTrue[iType][iTrkVar] -> GetXaxis() -> SetTitleOffset(fOffX);
      hTrkVarVsPtTrue[iType][iTrkVar] -> GetYaxis() -> SetTitle(sTrkTitles[iTrkVar].Data());
      hTrkVarVsPtTrue[iType][iTrkVar] -> GetYaxis() -> SetTitleFont(FTxt);
      hTrkVarVsPtTrue[iType][iTrkVar] -> GetYaxis() -> SetTitleOffset(fOffY);
      hTrkVarVsPtTrue[iType][iTrkVar] -> GetZaxis() -> SetTitle(sCountToUse.Data());
      hTrkVarVsPtTrue[iType][iTrkVar] -> GetZaxis() -> SetTitleFont(FTxt);
      hTrkVarVsPtTrue[iType][iTrkVar] -> GetZaxis() -> SetTitleOffset(fOffZ);
      hTrkVarVsPtFrac[iType][iTrkVar] -> SetMarkerColor(fTypeCol[iType]);
      hTrkVarVsPtFrac[iType][iTrkVar] -> SetMarkerStyle(fMar2D);
      hTrkVarVsPtFrac[iType][iTrkVar] -> SetLineColor(fTypeCol[iType]);
      hTrkVarVsPtFrac[iType][iTrkVar] -> SetLineStyle(fLin);
      hTrkVarVsPtFrac[iType][iTrkVar] -> SetFillColor(fTypeCol[iType]);
      hTrkVarVsPtFrac[iType][iTrkVar] -> SetFillStyle(fFil);
      hTrkVarVsPtFrac[iType][iTrkVar] -> SetTitleFont(FTxt);
      hTrkVarVsPtFrac[iType][iTrkVar] -> GetXaxis() -> SetTitle(sFracPt.Data());
      hTrkVarVsPtFrac[iType][iTrkVar] -> GetXaxis() -> SetTitleFont(FTxt);
      hTrkVarVsPtFrac[iType][iTrkVar] -> GetXaxis() -> SetTitleOffset(fOffX);
      hTrkVarVsPtFrac[iType][iTrkVar] -> GetYaxis() -> SetTitle(sTrkTitles[iTrkVar].Data());
      hTrkVarVsPtFrac[iType][iTrkVar] -> GetYaxis() -> SetTitleFont(FTxt);
      hTrkVarVsPtFrac[iType][iTrkVar] -> GetYaxis() -> SetTitleOffset(fOffY);
      hTrkVarVsPtFrac[iType][iTrkVar] -> GetZaxis() -> SetTitle(sCountToUse.Data());
      hTrkVarVsPtFrac[iType][iTrkVar] -> GetZaxis() -> SetTitleFont(FTxt);
      hTrkVarVsPtFrac[iType][iTrkVar] -> GetZaxis() -> SetTitleOffset(fOffZ);
    }
    for (Int_t iPhysVar = 0; iPhysVar < NPhysVar; iPhysVar++) {
      hPhysVar[iType][iPhysVar]         -> SetMarkerColor(fTypeCol[iType]);
      hPhysVar[iType][iPhysVar]         -> SetMarkerStyle(fTypeMar[iType]);
      hPhysVar[iType][iPhysVar]         -> SetLineColor(fTypeCol[iType]);
      hPhysVar[iType][iPhysVar]         -> SetLineStyle(fLin);
      hPhysVar[iType][iPhysVar]         -> SetFillColor(fTypeCol[iType]);
      hPhysVar[iType][iPhysVar]         -> SetFillStyle(fFil);
      hPhysVar[iType][iPhysVar]         -> SetTitleFont(FTxt);
      hPhysVar[iType][iPhysVar]         -> GetXaxis() -> SetTitle(sPhysTitles[iPhysVar].Data());
      hPhysVar[iType][iPhysVar]         -> GetXaxis() -> SetTitleFont(FTxt);
      hPhysVar[iType][iPhysVar]         -> GetXaxis() -> SetTitleOffset(fOffX);
      hPhysVar[iType][iPhysVar]         -> GetYaxis() -> SetTitle(sCountToUse.Data());
      hPhysVar[iType][iPhysVar]         -> GetYaxis() -> SetTitleFont(FTxt);
      hPhysVar[iType][iPhysVar]         -> GetYaxis() -> SetTitleOffset(fOffY);
      hPhysVarDiff[iType][iPhysVar]     -> SetMarkerColor(fTypeCol[iType]);
      hPhysVarDiff[iType][iPhysVar]     -> SetMarkerStyle(fTypeMar[iType]);
      hPhysVarDiff[iType][iPhysVar]     -> SetLineColor(fTypeCol[iType]);
      hPhysVarDiff[iType][iPhysVar]     -> SetLineStyle(fLin);
      hPhysVarDiff[iType][iPhysVar]     -> SetFillColor(fTypeCol[iType]);
      hPhysVarDiff[iType][iPhysVar]     -> SetFillStyle(fFil);
      hPhysVarDiff[iType][iPhysVar]     -> SetTitleFont(FTxt);
      hPhysVarDiff[iType][iPhysVar]     -> GetXaxis() -> SetTitle(sPhysDiffTitles[iPhysVar].Data());
      hPhysVarDiff[iType][iPhysVar]     -> GetXaxis() -> SetTitleFont(FTxt);
      hPhysVarDiff[iType][iPhysVar]     -> GetXaxis() -> SetTitleOffset(fOffX);
      hPhysVarDiff[iType][iPhysVar]     -> GetYaxis() -> SetTitle(sCountToUse.Data());
      hPhysVarDiff[iType][iPhysVar]     -> GetYaxis() -> SetTitleFont(FTxt);
      hPhysVarDiff[iType][iPhysVar]     -> GetYaxis() -> SetTitleOffset(fOffY);
      hPhysVarFrac[iType][iPhysVar]     -> SetMarkerColor(fTypeCol[iType]);
      hPhysVarFrac[iType][iPhysVar]     -> SetMarkerStyle(fTypeMar[iType]);
      hPhysVarFrac[iType][iPhysVar]     -> SetLineColor(fTypeCol[iType]);
      hPhysVarFrac[iType][iPhysVar]     -> SetLineStyle(fLin);
      hPhysVarFrac[iType][iPhysVar]     -> SetFillColor(fTypeCol[iType]);
      hPhysVarFrac[iType][iPhysVar]     -> SetFillStyle(fFil);
      hPhysVarFrac[iType][iPhysVar]     -> SetTitleFont(FTxt);
      hPhysVarFrac[iType][iPhysVar]     -> GetXaxis() -> SetTitle(sPhysFracTitles[iPhysVar].Data());
      hPhysVarFrac[iType][iPhysVar]     -> GetXaxis() -> SetTitleFont(FTxt);
      hPhysVarFrac[iType][iPhysVar]     -> GetXaxis() -> SetTitleOffset(fOffX);
      hPhysVarFrac[iType][iPhysVar]     -> GetYaxis() -> SetTitle(sCountToUse.Data());
      hPhysVarFrac[iType][iPhysVar]     -> GetYaxis() -> SetTitleFont(FTxt);
      hPhysVarFrac[iType][iPhysVar]     -> GetYaxis() -> SetTitleOffset(fOffY);
      hPhysVarVsNTpc[iType][iPhysVar]   -> SetMarkerColor(fTypeCol[iType]);
      hPhysVarVsNTpc[iType][iPhysVar]   -> SetMarkerStyle(fMar2D);
      hPhysVarVsNTpc[iType][iPhysVar]   -> SetLineColor(fTypeCol[iType]);
      hPhysVarVsNTpc[iType][iPhysVar]   -> SetLineStyle(fLin);
      hPhysVarVsNTpc[iType][iPhysVar]   -> SetFillColor(fTypeCol[iType]);
      hPhysVarVsNTpc[iType][iPhysVar]   -> SetFillStyle(fFil);
      hPhysVarVsNTpc[iType][iPhysVar]   -> SetTitleFont(FTxt);
      hPhysVarVsNTpc[iType][iPhysVar]   -> GetXaxis() -> SetTitle(sTrkNTpc.Data());
      hPhysVarVsNTpc[iType][iPhysVar]   -> GetXaxis() -> SetTitleFont(FTxt);
      hPhysVarVsNTpc[iType][iPhysVar]   -> GetXaxis() -> SetTitleOffset(fOffX);
      hPhysVarVsNTpc[iType][iPhysVar]   -> GetYaxis() -> SetTitle(sPhysTitles[iPhysVar].Data());
      hPhysVarVsNTpc[iType][iPhysVar]   -> GetYaxis() -> SetTitleFont(FTxt);
      hPhysVarVsNTpc[iType][iPhysVar]   -> GetYaxis() -> SetTitleOffset(fOffY);
      hPhysVarVsNTpc[iType][iPhysVar]   -> GetZaxis() -> SetTitle(sCountToUse.Data());
      hPhysVarVsNTpc[iType][iPhysVar]   -> GetZaxis() -> SetTitleFont(FTxt);
      hPhysVarVsNTpc[iType][iPhysVar]   -> GetZaxis() -> SetTitleOffset(fOffZ);
      hPhysVarVsDcaXY[iType][iPhysVar]  -> SetMarkerColor(fTypeCol[iType]);
      hPhysVarVsDcaXY[iType][iPhysVar]  -> SetMarkerStyle(fMar2D);
      hPhysVarVsDcaXY[iType][iPhysVar]  -> SetLineColor(fTypeCol[iType]);
      hPhysVarVsDcaXY[iType][iPhysVar]  -> SetLineStyle(fLin);
      hPhysVarVsDcaXY[iType][iPhysVar]  -> SetFillColor(fTypeCol[iType]);
      hPhysVarVsDcaXY[iType][iPhysVar]  -> SetFillStyle(fFil);
      hPhysVarVsDcaXY[iType][iPhysVar]  -> SetTitleFont(FTxt);
      hPhysVarVsDcaXY[iType][iPhysVar]  -> GetXaxis() -> SetTitle(sTrkDCAxy.Data());
      hPhysVarVsDcaXY[iType][iPhysVar]  -> GetXaxis() -> SetTitleFont(FTxt);
      hPhysVarVsDcaXY[iType][iPhysVar]  -> GetXaxis() -> SetTitleOffset(fOffX);
      hPhysVarVsDcaXY[iType][iPhysVar]  -> GetYaxis() -> SetTitle(sPhysTitles[iPhysVar].Data());
      hPhysVarVsDcaXY[iType][iPhysVar]  -> GetYaxis() -> SetTitleFont(FTxt);
      hPhysVarVsDcaXY[iType][iPhysVar]  -> GetYaxis() -> SetTitleOffset(fOffY);
      hPhysVarVsDcaXY[iType][iPhysVar]  -> GetZaxis() -> SetTitle(sCountToUse.Data());
      hPhysVarVsDcaXY[iType][iPhysVar]  -> GetZaxis() -> SetTitleFont(FTxt);
      hPhysVarVsDcaXY[iType][iPhysVar]  -> GetZaxis() -> SetTitleOffset(fOffZ);
      hPhysVarVsDcaZ[iType][iPhysVar]   -> SetMarkerColor(fTypeCol[iType]);
      hPhysVarVsDcaZ[iType][iPhysVar]   -> SetMarkerStyle(fMar2D);
      hPhysVarVsDcaZ[iType][iPhysVar]   -> SetLineColor(fTypeCol[iType]);
      hPhysVarVsDcaZ[iType][iPhysVar]   -> SetLineStyle(fLin);
      hPhysVarVsDcaZ[iType][iPhysVar]   -> SetFillColor(fTypeCol[iType]);
      hPhysVarVsDcaZ[iType][iPhysVar]   -> SetFillStyle(fFil);
      hPhysVarVsDcaZ[iType][iPhysVar]   -> SetTitleFont(FTxt);
      hPhysVarVsDcaZ[iType][iPhysVar]   -> GetXaxis() -> SetTitle(sTrkDCAz.Data());
      hPhysVarVsDcaZ[iType][iPhysVar]   -> GetXaxis() -> SetTitleFont(FTxt);
      hPhysVarVsDcaZ[iType][iPhysVar]   -> GetXaxis() -> SetTitleOffset(fOffX);
      hPhysVarVsDcaZ[iType][iPhysVar]   -> GetYaxis() -> SetTitle(sPhysTitles[iPhysVar].Data());
      hPhysVarVsDcaZ[iType][iPhysVar]   -> GetYaxis() -> SetTitleFont(FTxt);
      hPhysVarVsDcaZ[iType][iPhysVar]   -> GetYaxis() -> SetTitleOffset(fOffY);
      hPhysVarVsDcaZ[iType][iPhysVar]   -> GetZaxis() -> SetTitle(sCountToUse.Data());
      hPhysVarVsDcaZ[iType][iPhysVar]   -> GetZaxis() -> SetTitleFont(FTxt);
      hPhysVarVsDcaZ[iType][iPhysVar]   -> GetZaxis() -> SetTitleOffset(fOffZ);
      hPhysVarVsPtReco[iType][iPhysVar] -> SetMarkerColor(fTypeCol[iType]);
      hPhysVarVsPtReco[iType][iPhysVar] -> SetMarkerStyle(fMar2D);
      hPhysVarVsPtReco[iType][iPhysVar] -> SetLineColor(fTypeCol[iType]);
      hPhysVarVsPtReco[iType][iPhysVar] -> SetLineStyle(fLin);
      hPhysVarVsPtReco[iType][iPhysVar] -> SetFillColor(fTypeCol[iType]);
      hPhysVarVsPtReco[iType][iPhysVar] -> SetFillStyle(fFil);
      hPhysVarVsPtReco[iType][iPhysVar] -> SetTitleFont(FTxt);
      hPhysVarVsPtReco[iType][iPhysVar] -> GetXaxis() -> SetTitle(sTrkPt.Data());
      hPhysVarVsPtReco[iType][iPhysVar] -> GetXaxis() -> SetTitleFont(FTxt);
      hPhysVarVsPtReco[iType][iPhysVar] -> GetXaxis() -> SetTitleOffset(fOffX);
      hPhysVarVsPtReco[iType][iPhysVar] -> GetYaxis() -> SetTitle(sPhysTitles[iPhysVar].Data());
      hPhysVarVsPtReco[iType][iPhysVar] -> GetYaxis() -> SetTitleFont(FTxt);
      hPhysVarVsPtReco[iType][iPhysVar] -> GetYaxis() -> SetTitleOffset(fOffY);
      hPhysVarVsPtReco[iType][iPhysVar] -> GetZaxis() -> SetTitle(sCountToUse.Data());
      hPhysVarVsPtReco[iType][iPhysVar] -> GetZaxis() -> SetTitleFont(FTxt);
      hPhysVarVsPtReco[iType][iPhysVar] -> GetZaxis() -> SetTitleOffset(fOffZ);
      hPhysVarVsPtTrue[iType][iPhysVar] -> SetMarkerColor(fTypeCol[iType]);
      hPhysVarVsPtTrue[iType][iPhysVar] -> SetMarkerStyle(fMar2D);
      hPhysVarVsPtTrue[iType][iPhysVar] -> SetLineColor(fTypeCol[iType]);
      hPhysVarVsPtTrue[iType][iPhysVar] -> SetLineStyle(fLin);
      hPhysVarVsPtTrue[iType][iPhysVar] -> SetFillColor(fTypeCol[iType]);
      hPhysVarVsPtTrue[iType][iPhysVar] -> SetFillStyle(fFil);
      hPhysVarVsPtTrue[iType][iPhysVar] -> SetTitleFont(FTxt);
      hPhysVarVsPtTrue[iType][iPhysVar] -> GetXaxis() -> SetTitle(sTruPt.Data());
      hPhysVarVsPtTrue[iType][iPhysVar] -> GetXaxis() -> SetTitleFont(FTxt);
      hPhysVarVsPtTrue[iType][iPhysVar] -> GetXaxis() -> SetTitleOffset(fOffX);
      hPhysVarVsPtTrue[iType][iPhysVar] -> GetYaxis() -> SetTitle(sPhysTitles[iPhysVar].Data());
      hPhysVarVsPtTrue[iType][iPhysVar] -> GetYaxis() -> SetTitleFont(FTxt);
      hPhysVarVsPtTrue[iType][iPhysVar] -> GetYaxis() -> SetTitleOffset(fOffY);
      hPhysVarVsPtTrue[iType][iPhysVar] -> GetZaxis() -> SetTitle(sCountToUse.Data());
      hPhysVarVsPtTrue[iType][iPhysVar] -> GetZaxis() -> SetTitleFont(FTxt);
      hPhysVarVsPtTrue[iType][iPhysVar] -> GetZaxis() -> SetTitleOffset(fOffZ);
      hPhysVarVsPtFrac[iType][iPhysVar] -> SetMarkerColor(fTypeCol[iType]);
      hPhysVarVsPtFrac[iType][iPhysVar] -> SetMarkerStyle(fMar2D);
      hPhysVarVsPtFrac[iType][iPhysVar] -> SetLineColor(fTypeCol[iType]);
      hPhysVarVsPtFrac[iType][iPhysVar] -> SetLineStyle(fLin);
      hPhysVarVsPtFrac[iType][iPhysVar] -> SetFillColor(fTypeCol[iType]);
      hPhysVarVsPtFrac[iType][iPhysVar] -> SetFillStyle(fFil);
      hPhysVarVsPtFrac[iType][iPhysVar] -> SetTitleFont(FTxt);
      hPhysVarVsPtFrac[iType][iPhysVar] -> GetXaxis() -> SetTitle(sFracPt.Data());
      hPhysVarVsPtFrac[iType][iPhysVar] -> GetXaxis() -> SetTitleFont(FTxt);
      hPhysVarVsPtFrac[iType][iPhysVar] -> GetXaxis() -> SetTitleOffset(fOffX);
      hPhysVarVsPtFrac[iType][iPhysVar] -> GetYaxis() -> SetTitle(sPhysTitles[iPhysVar].Data());
      hPhysVarVsPtFrac[iType][iPhysVar] -> GetYaxis() -> SetTitleFont(FTxt);
      hPhysVarVsPtFrac[iType][iPhysVar] -> GetYaxis() -> SetTitleOffset(fOffY);
      hPhysVarVsPtFrac[iType][iPhysVar] -> GetZaxis() -> SetTitle(sCountToUse.Data());
      hPhysVarVsPtFrac[iType][iPhysVar] -> GetZaxis() -> SetTitleFont(FTxt);
      hPhysVarVsPtFrac[iType][iPhysVar] -> GetZaxis() -> SetTitleOffset(fOffZ);
    }
  }
  cout << "      Set histogram styles." << endl;
  return;

}  // end 'SetHistStyles()'



void STrackCutStudy::FillTrackHistograms(const Int_t type, const Double_t recoTrkVars[], const Double_t trueTrkVars[], const Double_t recoPhysVars[], const Double_t truePhysVars[]) {

  // make sure you're filling a non-truth-type histogram
  if (isTruth[type]) {
    cerr << "PANIC: trying to fill truth histograms in non-truth style! Check what you wrote!\n" << endl;
    assert(!isTruth[type]);
  }

  // grab 2d x-axes
  const auto nTpc   = recoTrkVars[TRKVAR::NTPC];
  const auto dcaXY  = recoTrkVars[TRKVAR::DCAXY];
  const auto dcaZ   = recoTrkVars[TRKVAR::DCAZ];
  const auto ptRec  = recoPhysVars[PHYSVAR::PT];
  const auto ptTrue = truePhysVars[PHYSVAR::PT];
  const auto ptFrac = ptRec / ptTrue;

  // fill track variable hists
  for (size_t iTrkVar = 0; iTrkVar < NTrkVar; iTrkVar++) {

    // calculate difference and fraction
    const auto trkVarDiff = recoTrkVars[iTrkVar] - trueTrkVars[iTrkVar];
    const auto trkVarFrac = recoTrkVars[iTrkVar] / trueTrkVars[iTrkVar];

    // fill hists
    hTrkVar[type][iTrkVar]         -> Fill(recoTrkVars[iTrkVar]);
    hTrkVarDiff[type][iTrkVar]     -> Fill(trkVarDiff);
    hTrkVarFrac[type][iTrkVar]     -> Fill(trkVarFrac);
    hTrkVarVsNTpc[type][iTrkVar]   -> Fill(nTpc,   recoTrkVars[iTrkVar]);
    hTrkVarVsDcaXY[type][iTrkVar]  -> Fill(dcaXY,  recoTrkVars[iTrkVar]);
    hTrkVarVsDcaZ[type][iTrkVar]   -> Fill(dcaZ,   recoTrkVars[iTrkVar]);
    hTrkVarVsPtReco[type][iTrkVar] -> Fill(ptRec,  recoTrkVars[iTrkVar]);
    hTrkVarVsPtTrue[type][iTrkVar] -> Fill(ptTrue, recoTrkVars[iTrkVar]);
    hTrkVarVsPtFrac[type][iTrkVar] -> Fill(ptFrac, recoTrkVars[iTrkVar]); 
  }

  // fill track variable hists
  for (size_t iPhysVar = 0; iPhysVar < NPhysVar; iPhysVar++) {

    // calculate difference and fraction
    const auto trkVarDiff = recoPhysVars[iPhysVar] - truePhysVars[iPhysVar];
    const auto trkVarFrac = recoPhysVars[iPhysVar] / truePhysVars[iPhysVar];

    // fill hists
    hPhysVar[type][iPhysVar]         -> Fill(recoPhysVars[iPhysVar]);
    hPhysVarDiff[type][iPhysVar]     -> Fill(trkVarDiff);
    hPhysVarFrac[type][iPhysVar]     -> Fill(trkVarFrac);
    hPhysVarVsNTpc[type][iPhysVar]   -> Fill(nTpc,   recoPhysVars[iPhysVar]);
    hPhysVarVsDcaXY[type][iPhysVar]  -> Fill(dcaXY,  recoPhysVars[iPhysVar]);
    hPhysVarVsDcaZ[type][iPhysVar]   -> Fill(dcaZ,   recoPhysVars[iPhysVar]);
    hPhysVarVsPtReco[type][iPhysVar] -> Fill(ptRec,  recoPhysVars[iPhysVar]);
    hPhysVarVsPtTrue[type][iPhysVar] -> Fill(ptTrue, recoPhysVars[iPhysVar]);
    hPhysVarVsPtFrac[type][iPhysVar] -> Fill(ptFrac, recoPhysVars[iPhysVar]); 
  }
  return;

}  // end 'FillTrackHistograms(Int_t, Double_t[], Double_t[], Double_t[], Double_t[])'



void STrackCutStudy::FillTruthHistograms(const Int_t type, const Double_t recoTrkVars[], const Double_t trueTrkVars[], const Double_t recoPhysVars[], const Double_t truePhysVars[]) {

  // make sure you're filling a truth-type histogram
  if (!isTruth[type]) {
    cerr << "PANIC: trying to fill non-truth histograms in truth style! Check what you wrote!\n" << endl;
    assert(isTruth[type]);
  }

  // grab 2d x-axes
  const auto nTpc   = recoTrkVars[TRKVAR::NTPC];
  const auto dcaXY  = recoTrkVars[TRKVAR::DCAXY];
  const auto dcaZ   = recoTrkVars[TRKVAR::DCAZ];
  const auto ptRec  = recoPhysVars[PHYSVAR::PT];
  const auto ptTrue = truePhysVars[PHYSVAR::PT];
  const auto ptFrac = ptRec / ptTrue;

  // fill track variable hists
  for (size_t iTrkVar = 0; iTrkVar < NTrkVar; iTrkVar++) {

    // make sure variable has truth value
    if (!trkVarHasTruVal[iTrkVar]) continue;

    // fill hists
    hTrkVar[type][iTrkVar]         -> Fill(trueTrkVars[iTrkVar]);
    hTrkVarVsNTpc[type][iTrkVar]   -> Fill(nTpc,   trueTrkVars[iTrkVar]);
    hTrkVarVsDcaXY[type][iTrkVar]  -> Fill(dcaXY,  trueTrkVars[iTrkVar]);
    hTrkVarVsDcaZ[type][iTrkVar]   -> Fill(dcaZ,   trueTrkVars[iTrkVar]);
    hTrkVarVsPtReco[type][iTrkVar] -> Fill(ptRec,  trueTrkVars[iTrkVar]);
    hTrkVarVsPtTrue[type][iTrkVar] -> Fill(ptTrue, trueTrkVars[iTrkVar]);
    hTrkVarVsPtFrac[type][iTrkVar] -> Fill(ptFrac, trueTrkVars[iTrkVar]); 
  }

  // fill track variable hists
  for (size_t iPhysVar = 0; iPhysVar < NPhysVar; iPhysVar++) {

    // make sure variable has truth value
    if (!physVarHasTruVal[iPhysVar]) continue;

    // fill hists
    hPhysVar[type][iPhysVar]         -> Fill(truePhysVars[iPhysVar]);
    hPhysVarVsNTpc[type][iPhysVar]   -> Fill(nTpc,   truePhysVars[iPhysVar]);
    hPhysVarVsDcaXY[type][iPhysVar]  -> Fill(dcaXY,  truePhysVars[iPhysVar]);
    hPhysVarVsDcaZ[type][iPhysVar]   -> Fill(dcaZ,   truePhysVars[iPhysVar]);
    hPhysVarVsPtReco[type][iPhysVar] -> Fill(ptRec,  truePhysVars[iPhysVar]);
    hPhysVarVsPtTrue[type][iPhysVar] -> Fill(ptTrue, truePhysVars[iPhysVar]);
    hPhysVarVsPtFrac[type][iPhysVar] -> Fill(ptFrac, truePhysVars[iPhysVar]); 
  }
  return;

}  // end 'FillTruthHistograms(Int_t, Double_t[], Double_t[], Double_t[], Double_t[])'

// end ------------------------------------------------------------------------
