// ----------------------------------------------------------------------------
// 'SDeltaPtCutStudy.sys.h'
// Derek Anderson
// 07.06.2023
//
// Reads in the 'ntp_track' Ntuple
// generated by the SVtxEvaluator
// class and studies how deltapt/pt
// varies with quality cuts.
// ----------------------------------------------------------------------------

#pragma once

using namespace std;



// system methods -------------------------------------------------------------

void SDeltaPtCutStudy::InitVectors() {

  // initialize projection-related vectors
  for (size_t iProj = 0; iProj < nProj; iProj++) {

    // initialize variables for sigma calculation
    muProj.push_back(0.);
    sigProj.push_back(0.);

    // initialize histograms, functions, and strings
    hPtDeltaProj.push_back(NULL);
    fPtDeltaProj.push_back(NULL); 
    sPtProj.push_back("");
  }  // end projection loop

  // initialize flat delta-pt cut-related vectors
  for (size_t iCut = 0; iCut < nDPtCuts; iCut++) {

    // initialize variables for rejection calculation
    nNormCut.push_back(0.);
    nWeirdCut.push_back(0.);
    rejCut.push_back(0.);

    // initialize histograms
    hPtDeltaProj.push_back(NULL);
    hPtDeltaCut.push_back(NULL);
    hPtTrackCut.push_back(NULL);
    hPtFracCut.push_back(NULL);
    hPtTrkTruCut.push_back(NULL);
    hEffCut.push_back(NULL);
    hPtDeltaVsFracCut.push_back(NULL);
    hPtDeltaVsTrueCut.push_back(NULL);
    hPtDeltaVsTrackCut.push_back(NULL);
    hPtTrueVsTrackCut.push_back(NULL);
  }

  // initialize pt-dependent delta-pt cut-related vectors
  for (size_t iSig = 0; iSig < nSigCuts; iSig++) {

    // initialize variables for rejection calculation
    nNormSig.push_back(0.);
    nWeirdSig.push_back(0.);
    rejSig.push_back(0.);

    // initialize variables for sigma calculation
    vector<double> vecHiProj(nProj, 0.);
    vector<double> vecLoProj(nProj, 0.);
    muHiProj.push_back(vecHiProj);
    muLoProj.push_back(vecLoProj);

    // initialize histograms
    hPtDeltaSig.push_back(NULL);
    hPtTrackSig.push_back(NULL);
    hPtFracSig.push_back(NULL);
    hPtTrkTruSig.push_back(NULL);
    hEffSig.push_back(NULL);
    hPtDeltaVsFracSig.push_back(NULL);
    hPtDeltaVsTrueSig.push_back(NULL);
    hPtDeltaVsTrackSig.push_back(NULL);
    hPtTrueVsTrackSig.push_back(NULL);

    // initialze functions and graphs
    fPtDeltaProj.push_back(NULL);
    fMuHiProj.push_back(NULL);
    fMuLoProj.push_back(NULL);
    grMuHiProj.push_back(NULL);
    grMuLoProj.push_back(NULL);
  }

  cout << "    Initialized vectors." << endl;
  return;

}  // end 'InitVectors()'


void SDeltaPtCutStudy::InitTuples() {

  // set track branch addresses
  ntTrack -> SetBranchAddress("event",           &trk_event);
  ntTrack -> SetBranchAddress("seed",            &trk_seed);
  ntTrack -> SetBranchAddress("trackID",         &trk_trackID);
  ntTrack -> SetBranchAddress("crossing",        &trk_crossing);
  ntTrack -> SetBranchAddress("px",              &trk_px);
  ntTrack -> SetBranchAddress("py",              &trk_py);
  ntTrack -> SetBranchAddress("pz",              &trk_pz);
  ntTrack -> SetBranchAddress("pt",              &trk_pt);
  ntTrack -> SetBranchAddress("eta",             &trk_eta);
  ntTrack -> SetBranchAddress("phi",             &trk_phi);
  ntTrack -> SetBranchAddress("deltapt",         &trk_deltapt);
  ntTrack -> SetBranchAddress("deltaeta",        &trk_deltaeta);
  ntTrack -> SetBranchAddress("deltaphi",        &trk_deltaphi);
  ntTrack -> SetBranchAddress("charge",          &trk_charge);
  ntTrack -> SetBranchAddress("quality",         &trk_quality);
  ntTrack -> SetBranchAddress("chisq",           &trk_chisq);
  ntTrack -> SetBranchAddress("ndf",             &trk_ndf);
  ntTrack -> SetBranchAddress("nhits",           &trk_nhits);
  ntTrack -> SetBranchAddress("nmaps",           &trk_nmaps);
  ntTrack -> SetBranchAddress("nintt",           &trk_nintt);
  ntTrack -> SetBranchAddress("ntpc",            &trk_ntpc);
  ntTrack -> SetBranchAddress("nmms",            &trk_nmms);
  ntTrack -> SetBranchAddress("ntpc1",           &trk_ntpc1);
  ntTrack -> SetBranchAddress("ntpc11",          &trk_ntpc11);
  ntTrack -> SetBranchAddress("ntpc2",           &trk_ntpc2);
  ntTrack -> SetBranchAddress("ntpc3",           &trk_ntpc3);
  ntTrack -> SetBranchAddress("nlmaps",          &trk_nlmaps);
  ntTrack -> SetBranchAddress("nlintt",          &trk_nlintt);
  ntTrack -> SetBranchAddress("nltpc",           &trk_nltpc);
  ntTrack -> SetBranchAddress("nlmms",           &trk_nlmms);
  ntTrack -> SetBranchAddress("layers",          &trk_layers);
  ntTrack -> SetBranchAddress("vertexID",        &trk_vertexID);
  ntTrack -> SetBranchAddress("vx",              &trk_vx);
  ntTrack -> SetBranchAddress("vy",              &trk_vy);
  ntTrack -> SetBranchAddress("vz",              &trk_vz);
  ntTrack -> SetBranchAddress("dca2d",           &trk_dca2d);
  ntTrack -> SetBranchAddress("dca2dsigma",      &trk_dca2dsigma);
  ntTrack -> SetBranchAddress("dca3dxy",         &trk_dca3dxy);
  ntTrack -> SetBranchAddress("dca3dxysigma",    &trk_dca3dxysigma);
  ntTrack -> SetBranchAddress("dca3dz",          &trk_dca3dz);
  ntTrack -> SetBranchAddress("dca3dzsigma",     &trk_dca3dzsigma);
  ntTrack -> SetBranchAddress("pcax",            &trk_pcax);
  ntTrack -> SetBranchAddress("pcay",            &trk_pcay);
  ntTrack -> SetBranchAddress("pcaz",            &trk_pcaz);
  ntTrack -> SetBranchAddress("gtrackID",        &trk_gtrackID);
  ntTrack -> SetBranchAddress("gflavor",         &trk_gflavor);
  ntTrack -> SetBranchAddress("gnhits",          &trk_gnhits);
  ntTrack -> SetBranchAddress("gnmaps",          &trk_gnmaps);
  ntTrack -> SetBranchAddress("gnintt",          &trk_gnintt);
  ntTrack -> SetBranchAddress("gntpc",           &trk_gntpc);
  ntTrack -> SetBranchAddress("gnmms",           &trk_gnmms);
  ntTrack -> SetBranchAddress("gnlmaps",         &trk_gnlmaps);
  ntTrack -> SetBranchAddress("gnlintt",         &trk_gnlintt);
  ntTrack -> SetBranchAddress("gnltpc",          &trk_gnltpc);
  ntTrack -> SetBranchAddress("gnlmms",          &trk_gnlmms);
  ntTrack -> SetBranchAddress("gpx",             &trk_gpx);
  ntTrack -> SetBranchAddress("gpy",             &trk_gpy);
  ntTrack -> SetBranchAddress("gpz",             &trk_gpz);
  ntTrack -> SetBranchAddress("gpt",             &trk_gpt);
  ntTrack -> SetBranchAddress("geta",            &trk_geta);
  ntTrack -> SetBranchAddress("gphi",            &trk_gphi);
  ntTrack -> SetBranchAddress("gvx",             &trk_gvx);
  ntTrack -> SetBranchAddress("gvy",             &trk_gvy);
  ntTrack -> SetBranchAddress("gvz",             &trk_gvz);
  ntTrack -> SetBranchAddress("gvt",             &trk_gvt);
  ntTrack -> SetBranchAddress("gfpx",            &trk_gfpx);
  ntTrack -> SetBranchAddress("gfpy",            &trk_gfpy);
  ntTrack -> SetBranchAddress("gfpz",            &trk_gfpz);
  ntTrack -> SetBranchAddress("gfx",             &trk_gfx);
  ntTrack -> SetBranchAddress("gfy",             &trk_gfy);
  ntTrack -> SetBranchAddress("gfz",             &trk_gfz);
  ntTrack -> SetBranchAddress("gembed",          &trk_gembed);
  ntTrack -> SetBranchAddress("gprimary",        &trk_gprimary);
  ntTrack -> SetBranchAddress("nfromtruth",      &trk_nfromtruth);
  ntTrack -> SetBranchAddress("nwrong",          &trk_nwrong);
  ntTrack -> SetBranchAddress("ntrumaps",        &trk_ntrumaps);
  ntTrack -> SetBranchAddress("ntruintt",        &trk_ntruintt);
  ntTrack -> SetBranchAddress("ntrutpc",         &trk_ntrutpc);
  ntTrack -> SetBranchAddress("ntrumms",         &trk_ntrumms);
  ntTrack -> SetBranchAddress("ntrutpc1",        &trk_ntrutpc1);
  ntTrack -> SetBranchAddress("ntrutpc11",       &trk_ntrutpc11);
  ntTrack -> SetBranchAddress("ntrutpc2",        &trk_ntrutpc2);
  ntTrack -> SetBranchAddress("ntrutpc3",        &trk_ntrutpc3);
  ntTrack -> SetBranchAddress("layersfromtruth", &trk_layersfromtruth);
  ntTrack -> SetBranchAddress("nhittpcall",      &trk_nhittpcall);
  ntTrack -> SetBranchAddress("nhittpcin",       &trk_nhittpcin);
  ntTrack -> SetBranchAddress("nhittpcmid",      &trk_nhittpcmid);
  ntTrack -> SetBranchAddress("nhittpcout",      &trk_nhittpcout);
  ntTrack -> SetBranchAddress("nclusall",        &trk_nclusall);
  ntTrack -> SetBranchAddress("nclustpc",        &trk_nclustpc);
  ntTrack -> SetBranchAddress("nclusintt",       &trk_nclusintt);
  ntTrack -> SetBranchAddress("nclusmaps",       &trk_nclusmaps);
  ntTrack -> SetBranchAddress("nclusmms",        &trk_nclusmms);

  // Set branch addresses.
  ntTruth -> SetBranchAddress("event",           &tru_event);
  ntTruth -> SetBranchAddress("seed",            &tru_seed);
  ntTruth -> SetBranchAddress("gntracks",        &tru_gntracks);
  ntTruth -> SetBranchAddress("gtrackID",        &tru_gtrackID);
  ntTruth -> SetBranchAddress("gflavor",         &tru_gflavor);
  ntTruth -> SetBranchAddress("gnhits",          &tru_gnhits);
  ntTruth -> SetBranchAddress("gnmaps",          &tru_gnmaps);
  ntTruth -> SetBranchAddress("gnintt",          &tru_gnintt);
  ntTruth -> SetBranchAddress("gnmms",           &tru_gnmms);
  ntTruth -> SetBranchAddress("gnintt1",         &tru_gnintt1);
  ntTruth -> SetBranchAddress("gnintt2",         &tru_gnintt2);
  ntTruth -> SetBranchAddress("gnintt3",         &tru_gnintt3);
  ntTruth -> SetBranchAddress("gnintt4",         &tru_gnintt4);
  ntTruth -> SetBranchAddress("gnintt5",         &tru_gnintt5);
  ntTruth -> SetBranchAddress("gnintt6",         &tru_gnintt6);
  ntTruth -> SetBranchAddress("gnintt7",         &tru_gnintt7);
  ntTruth -> SetBranchAddress("gnintt8",         &tru_gnintt8);
  ntTruth -> SetBranchAddress("gntpc",           &tru_gntpc);
  ntTruth -> SetBranchAddress("gnlmaps",         &tru_gnlmaps);
  ntTruth -> SetBranchAddress("gnlintt",         &tru_gnlintt);
  ntTruth -> SetBranchAddress("gnltpc",          &tru_gnltpc);
  ntTruth -> SetBranchAddress("gnlmms",          &tru_gnlmms);
  ntTruth -> SetBranchAddress("gpx",             &tru_gpx);
  ntTruth -> SetBranchAddress("gpy",             &tru_gpy);
  ntTruth -> SetBranchAddress("gpz",             &tru_gpz);
  ntTruth -> SetBranchAddress("gpt",             &tru_gpt);
  ntTruth -> SetBranchAddress("geta",            &tru_geta);
  ntTruth -> SetBranchAddress("gphi",            &tru_gphi);
  ntTruth -> SetBranchAddress("gvx",             &tru_gvx);
  ntTruth -> SetBranchAddress("gvy",             &tru_gvy);
  ntTruth -> SetBranchAddress("gvz",             &tru_gvz);
  ntTruth -> SetBranchAddress("gvt",             &tru_gvt);
  ntTruth -> SetBranchAddress("gfpx",            &tru_gfpx);
  ntTruth -> SetBranchAddress("gfpy",            &tru_gfpy);
  ntTruth -> SetBranchAddress("gfpz",            &tru_gfpz);
  ntTruth -> SetBranchAddress("gfx",             &tru_gfx);
  ntTruth -> SetBranchAddress("gfy",             &tru_gfy);
  ntTruth -> SetBranchAddress("gfz",             &tru_gfz);
  ntTruth -> SetBranchAddress("gembed",          &tru_gembed);
  ntTruth -> SetBranchAddress("gprimary",        &tru_gprimary);
  ntTruth -> SetBranchAddress("trackID",         &tru_trackID);
  ntTruth -> SetBranchAddress("px",              &tru_px);
  ntTruth -> SetBranchAddress("py",              &tru_py);
  ntTruth -> SetBranchAddress("pz",              &tru_pz);
  ntTruth -> SetBranchAddress("pt",              &tru_pt);
  ntTruth -> SetBranchAddress("eta",             &tru_eta);
  ntTruth -> SetBranchAddress("phi",             &tru_phi);
  ntTruth -> SetBranchAddress("deltapt",         &tru_deltapt);
  ntTruth -> SetBranchAddress("deltaeta",        &tru_deltaeta);
  ntTruth -> SetBranchAddress("deltaphi",        &tru_deltaphi);
  ntTruth -> SetBranchAddress("charge",          &tru_charge);
  ntTruth -> SetBranchAddress("quality",         &tru_quality);
  ntTruth -> SetBranchAddress("chisq",           &tru_chisq);
  ntTruth -> SetBranchAddress("ndf",             &tru_ndf);
  ntTruth -> SetBranchAddress("nhits",           &tru_nhits);
  ntTruth -> SetBranchAddress("layers",          &tru_layers);
  ntTruth -> SetBranchAddress("nmaps",           &tru_nmaps);
  ntTruth -> SetBranchAddress("nintt",           &tru_nintt);
  ntTruth -> SetBranchAddress("ntpc",            &tru_ntpc);
  ntTruth -> SetBranchAddress("nmms",            &tru_nmms);
  ntTruth -> SetBranchAddress("ntpc1",           &tru_ntpc1);
  ntTruth -> SetBranchAddress("ntpc11",          &tru_ntpc11);
  ntTruth -> SetBranchAddress("ntpc2",           &tru_ntpc2);
  ntTruth -> SetBranchAddress("ntpc3",           &tru_ntpc3);
  ntTruth -> SetBranchAddress("nlmaps",          &tru_nlmaps);
  ntTruth -> SetBranchAddress("nlintt",          &tru_nlintt);
  ntTruth -> SetBranchAddress("nltpc",           &tru_nltpc);
  ntTruth -> SetBranchAddress("nlmms",           &tru_nlmms);
  ntTruth -> SetBranchAddress("vertexID",        &tru_vertexID);
  ntTruth -> SetBranchAddress("vx",              &tru_vx);
  ntTruth -> SetBranchAddress("vy",              &tru_vy);
  ntTruth -> SetBranchAddress("vz",              &tru_vz);
  ntTruth -> SetBranchAddress("dca2d",           &tru_dca2d);
  ntTruth -> SetBranchAddress("dca2dsigma",      &tru_dca2dsigma);
  ntTruth -> SetBranchAddress("dca3dxy",         &tru_dca3dxy);
  ntTruth -> SetBranchAddress("dca3dxysigma",    &tru_dca3dxysigma);
  ntTruth -> SetBranchAddress("dca3dz",          &tru_dca3dz);
  ntTruth -> SetBranchAddress("dca3dzsigma",     &tru_dca3dzsigma);
  ntTruth -> SetBranchAddress("pcax",            &tru_pcax);
  ntTruth -> SetBranchAddress("pcay",            &tru_pcay);
  ntTruth -> SetBranchAddress("pcaz",            &tru_pcaz);
  ntTruth -> SetBranchAddress("nfromtruth",      &tru_nfromtruth);
  ntTruth -> SetBranchAddress("nwrong",          &tru_nwrong);
  ntTruth -> SetBranchAddress("ntrumaps",        &tru_ntrumaps);
  ntTruth -> SetBranchAddress("ntruintt",        &tru_ntruintt);
  ntTruth -> SetBranchAddress("ntrutpc",         &tru_ntrutpc);
  ntTruth -> SetBranchAddress("ntrumms",         &tru_ntrumms);
  ntTruth -> SetBranchAddress("ntrutpc1",        &tru_ntrutpc1);
  ntTruth -> SetBranchAddress("ntrutpc11",       &tru_ntrutpc11);
  ntTruth -> SetBranchAddress("ntrutpc2",        &tru_ntrutpc2);
  ntTruth -> SetBranchAddress("ntrutpc3",        &tru_ntrutpc3);
  ntTruth -> SetBranchAddress("layersfromtruth", &tru_layersfromtruth);
  ntTruth -> SetBranchAddress("nhittpcall",      &tru_nhittpcall);
  ntTruth -> SetBranchAddress("nhittpcin",       &tru_nhittpcin);
  ntTruth -> SetBranchAddress("nhittpcmid",      &tru_nhittpcmid);
  ntTruth -> SetBranchAddress("nhittpcout",      &tru_nhittpcout);
  ntTruth -> SetBranchAddress("nclusall",        &tru_nclusall);
  ntTruth -> SetBranchAddress("nclustpc",        &tru_nclustpc);
  ntTruth -> SetBranchAddress("nclusintt",       &tru_nclusintt);
  ntTruth -> SetBranchAddress("nclusmaps",       &tru_nclusmaps);
  ntTruth -> SetBranchAddress("nclusmms",        &tru_nclusmms);

  cout << "    Initialized input tuples." << endl;
  return;

}  // end 'InitTuples()'



void SDeltaPtCutStudy::InitHists() {

  // histogram binning
  const uint64_t nPtBins(1000);
  const uint64_t nFracBins(1000);
  const uint64_t nDeltaBins(5000);
  const float    rPtBins[Const::NRange]    = {0., 100.};
  const float    rFracBins[Const::NRange]  = {0., 10.};
  const float    rDeltaBins[Const::NRange] = {0., 5.};

  // create names
  TString sPtTruth("h");
  TString sPtDelta("h");
  TString sPtTrack("h");
  TString sPtFrac("h");
  TString sPtTrkTru("h");
  sPtTruth.Append(sPtTrueBase.Data());
  sPtDelta.Append(sPtDeltaBase.Data());
  sPtTrack.Append(sPtRecoBase.Data());
  sPtFrac.Append(sPtFracBase.Data());
  sPtTrkTru.Append(sPtTrkTruBase.Data());

  TString sPtDeltaVsFrac("h");
  TString sPtDeltaVsTrue("h");
  TString sPtDeltaVsTrack("h");
  TString sPtTrueVsTrack("h");
  sPtDeltaVsFrac.Append(sPtDeltaBase.Data());
  sPtDeltaVsTrue.Append(sPtDeltaBase.Data());
  sPtDeltaVsTrack.Append(sPtDeltaBase.Data());
  sPtTrueVsTrack.Append(sPtTrueBase.Data());
  sPtDeltaVsFrac.Append("Vs");
  sPtDeltaVsTrue.Append("Vs");
  sPtDeltaVsTrack.Append("Vs");
  sPtTrueVsTrack.Append("Vs");
  sPtDeltaVsFrac.Append(sPtFracBase.Data());
  sPtDeltaVsTrue.Append(sPtTrueBase.Data());
  sPtDeltaVsTrack.Append(sPtRecoBase.Data());
  sPtTrueVsTrack.Append(sPtRecoBase.Data());

  // delta-pt projection names
  for (size_t iProj = 0; iProj < nProj; iProj++) {
    sPtProj[iProj] = "h";
    sPtProj[iProj].Append(sPtProjBase.Data());
    sPtProj[iProj].Append(sProjSuffix[iProj].Data());
  }

  // flat delta-pt cut names
  vector<TString> sPtDeltaCut(nDPtCuts);
  vector<TString> sPtTrackCut(nDPtCuts);
  vector<TString> sPtFracCut(nDPtCuts);
  vector<TString> sPtTrkTruCut(nDPtCuts);
  vector<TString> sPtDeltaVsFracCut(nDPtCuts);
  vector<TString> sPtDeltaVsTrueCut(nDPtCuts);
  vector<TString> sPtDeltaVsTrackCut(nDPtCuts);
  vector<TString> sPtTrueVsTrackCut(nDPtCuts);
  for (size_t iCut = 0; iCut < nDPtCuts; iCut++) {
    sPtDeltaCut[iCut]  = "h";
    sPtTrackCut[iCut]  = "h";
    sPtFracCut[iCut]   = "h";
    sPtTrkTruCut[iCut] = "h";
    sPtDeltaCut[iCut].Append(sPtDeltaBase.Data());
    sPtTrackCut[iCut].Append(sPtRecoBase.Data());
    sPtFracCut[iCut].Append(sPtFracBase.Data());
    sPtTrkTruCut[iCut].Append(sPtTrkTruBase.Data());
    sPtDeltaCut[iCut].Append(sDPtSuffix[iCut].Data());
    sPtTrackCut[iCut].Append(sDPtSuffix[iCut].Data());
    sPtFracCut[iCut].Append(sDPtSuffix[iCut].Data());
    sPtTrkTruCut[iCut].Append(sDPtSuffix[iCut].Data());

    sPtDeltaVsFracCut[iCut]  = "h";
    sPtDeltaVsTrueCut[iCut]  = "h";
    sPtDeltaVsTrackCut[iCut] = "h";
    sPtTrueVsTrackCut[iCut]  = "h";
    sPtDeltaVsFracCut[iCut].Append(sPtDeltaBase.Data());
    sPtDeltaVsFracCut[iCut].Append(sPtDeltaBase.Data());
    sPtDeltaVsTrueCut[iCut].Append(sPtDeltaBase.Data());
    sPtDeltaVsTrackCut[iCut].Append(sPtDeltaBase.Data());
    sPtTrueVsTrackCut[iCut].Append(sPtTrueBase.Data());
    sPtDeltaVsFracCut[iCut].Append("Vs");
    sPtDeltaVsTrueCut[iCut].Append("Vs");
    sPtDeltaVsTrackCut[iCut].Append("Vs");
    sPtTrueVsTrackCut[iCut].Append("Vs");
    sPtDeltaVsFracCut[iCut].Append(sPtFracBase.Data());
    sPtDeltaVsTrueCut[iCut].Append(sPtTrueBase.Data());
    sPtDeltaVsTrackCut[iCut].Append(sPtRecoBase.Data());
    sPtTrueVsTrackCut[iCut].Append(sPtRecoBase.Data());
    sPtDeltaVsFracCut[iCut].Append(sDPtSuffix[iCut].Data());
    sPtDeltaVsTrueCut[iCut].Append(sDPtSuffix[iCut].Data());
    sPtDeltaVsTrackCut[iCut].Append(sDPtSuffix[iCut].Data());
    sPtTrueVsTrackCut[iCut].Append(sDPtSuffix[iCut].Data());
  }

  // pt-dependent delta-pt cut names
  vector<TString> sPtDeltaSig(nSigCuts);
  vector<TString> sPtTrackSig(nSigCuts);
  vector<TString> sPtFracSig(nSigCuts);
  vector<TString> sPtTrkTruSig(nSigCuts);
  vector<TString> sPtDeltaVsFracSig(nSigCuts);
  vector<TString> sPtDeltaVsTrueSig(nSigCuts);
  vector<TString> sPtDeltaVsTrackSig(nSigCuts);
  vector<TString> sPtTrueVsTrackSig(nSigCuts);
  for (size_t iSig = 0; iSig < nSigCuts; iSig++) {
    sPtDeltaSig[iSig]  = "h";
    sPtTrackSig[iSig]  = "h";
    sPtFracSig[iSig]   = "h";
    sPtTrkTruSig[iSig] = "h";
    sPtDeltaSig[iSig].Append(sPtDeltaBase.Data());
    sPtTrackSig[iSig].Append(sPtRecoBase.Data());
    sPtFracSig[iSig].Append(sPtFracBase.Data());
    sPtTrkTruSig[iSig].Append(sPtTrkTruBase.Data());
    sPtDeltaSig[iSig].Append(sSigSuffix[iSig].Data());
    sPtTrackSig[iSig].Append(sSigSuffix[iSig].Data());
    sPtFracSig[iSig].Append(sSigSuffix[iSig].Data());
    sPtTrkTruSig[iSig].Append(sSigSuffix[iSig].Data());

    sPtDeltaVsFracSig[iSig]  = "h";
    sPtDeltaVsTrueSig[iSig]  = "h";
    sPtDeltaVsTrackSig[iSig] = "h";
    sPtTrueVsTrackSig[iSig]  = "h";
    sPtDeltaVsFracSig[iSig].Append(sPtDeltaBase.Data());
    sPtDeltaVsFracSig[iSig].Append(sPtDeltaBase.Data());
    sPtDeltaVsTrueSig[iSig].Append(sPtDeltaBase.Data());
    sPtDeltaVsTrackSig[iSig].Append(sPtDeltaBase.Data());
    sPtTrueVsTrackSig[iSig].Append(sPtTrueBase.Data());
    sPtDeltaVsFracSig[iSig].Append("Vs");
    sPtDeltaVsTrueSig[iSig].Append("Vs");
    sPtDeltaVsTrackSig[iSig].Append("Vs");
    sPtTrueVsTrackSig[iSig].Append("Vs");
    sPtDeltaVsFracSig[iSig].Append(sPtFracBase.Data());
    sPtDeltaVsTrueSig[iSig].Append(sPtTrueBase.Data());
    sPtDeltaVsTrackSig[iSig].Append(sPtRecoBase.Data());
    sPtTrueVsTrackSig[iSig].Append(sPtRecoBase.Data());
    sPtDeltaVsFracSig[iSig].Append(sSigSuffix[iSig].Data());
    sPtDeltaVsTrueSig[iSig].Append(sSigSuffix[iSig].Data());
    sPtDeltaVsTrackSig[iSig].Append(sSigSuffix[iSig].Data());
    sPtTrueVsTrackSig[iSig].Append(sSigSuffix[iSig].Data());
  }

  // initialize histograms
  hPtTruth  = new TH1D(sPtTruth.Data(),  "", nPtBins,    rPtBins[0],    rPtBins[1]);
  hPtDelta  = new TH1D(sPtDelta.Data(),  "", nDeltaBins, rDeltaBins[0], rDeltaBins[1]);
  hPtTrack  = new TH1D(sPtTrack.Data(),  "", nPtBins,    rPtBins[0],    rPtBins[1]);
  hPtFrac   = new TH1D(sPtFrac.Data(),   "", nFracBins,  rFracBins[0],  rFracBins[1]);
  hPtTrkTru = new TH1D(sPtTrkTru.Data(), "", nPtBins,    rPtBins[0],    rPtBins[1]);
  hPtTruth  -> Sumw2();
  hPtDelta  -> Sumw2();
  hPtTrack  -> Sumw2();
  hPtFrac   -> Sumw2();
  hPtTrkTru -> Sumw2();

  hPtDeltaVsFrac  = new TH2D(sPtDeltaVsFrac.Data(),  "", nFracBins, rFracBins[0], rFracBins[1], nDeltaBins, rDeltaBins[0], rDeltaBins[1]);
  hPtDeltaVsTrue  = new TH2D(sPtDeltaVsTrue.Data(),  "", nPtBins,   rPtBins[0],   rPtBins[1],   nDeltaBins, rDeltaBins[0], rDeltaBins[1]);
  hPtDeltaVsTrack = new TH2D(sPtDeltaVsTrack.Data(), "", nPtBins,   rPtBins[0],   rPtBins[1],   nDeltaBins, rDeltaBins[0], rDeltaBins[1]);
  hPtTrueVsTrack  = new TH2D(sPtTrueVsTrack.Data(),  "", nPtBins,   rPtBins[0],   rPtBins[1],   nPtBins,    rPtBins[0],    rPtBins[1]);
  hPtDeltaVsFrac  -> Sumw2();
  hPtDeltaVsTrue  -> Sumw2();
  hPtDeltaVsTrack -> Sumw2();
  hPtTrueVsTrack  -> Sumw2();

  // delta-pt projection histograms
  for (size_t iProj = 0; iProj < nProj; iProj++) {
    hPtDeltaProj[iProj] = new TH1D(sPtProj[iProj].Data(), "", nDeltaBins, rDeltaBins[0], rDeltaBins[1]);
    hPtDeltaProj[iProj] -> Sumw2();
  }

  // flat delta-pt cut histograms
  for (size_t iCut = 0; iCut < nDPtCuts; iCut++) {
    hPtDeltaCut[iCut]  = new TH1D(sPtDeltaCut[iCut].Data(),  "", nDeltaBins, rDeltaBins[0], rDeltaBins[1]);
    hPtTrackCut[iCut]  = new TH1D(sPtTrackCut[iCut].Data(),  "", nPtBins,    rPtBins[0],    rPtBins[1]);
    hPtFracCut[iCut]   = new TH1D(sPtFracCut[iCut].Data(),   "", nFracBins,  rFracBins[0],  rFracBins[1]);
    hPtTrkTruCut[iCut] = new TH1D(sPtTrkTruCut[iCut].Data(), "", nPtBins,    rPtBins[0],    rPtBins[1]);
    hPtDeltaCut[iCut]  -> Sumw2();
    hPtTrackCut[iCut]  -> Sumw2();
    hPtFracCut[iCut]   -> Sumw2();
    hPtTrkTruCut[iCut] -> Sumw2();

    hPtDeltaVsFracCut[iCut]  = new TH2D(sPtDeltaVsFracCut[iCut].Data(),  "", nFracBins, rFracBins[0], rFracBins[1], nDeltaBins, rDeltaBins[0], rDeltaBins[1]);
    hPtDeltaVsTrueCut[iCut]  = new TH2D(sPtDeltaVsTrueCut[iCut].Data(),  "", nPtBins,   rPtBins[0],   rPtBins[1],   nDeltaBins, rDeltaBins[0], rDeltaBins[1]);
    hPtDeltaVsTrackCut[iCut] = new TH2D(sPtDeltaVsTrackCut[iCut].Data(), "", nPtBins,   rPtBins[0],   rPtBins[1],   nDeltaBins, rDeltaBins[0], rDeltaBins[1]);
    hPtTrueVsTrackCut[iCut]  = new TH2D(sPtTrueVsTrackCut[iCut].Data(),  "", nPtBins,   rPtBins[0],   rPtBins[1],   nPtBins,    rPtBins[0],    rPtBins[1]);
    hPtDeltaVsFracCut[iCut]  -> Sumw2();
    hPtDeltaVsTrueCut[iCut]  -> Sumw2();
    hPtDeltaVsTrackCut[iCut] -> Sumw2();
    hPtTrueVsTrackCut[iCut]  -> Sumw2();
  }

  // pt-dependent delta-pt cut histograms
  for (size_t iSig = 0; iSig < nSigCuts; iSig++) {
    hPtDeltaSig[iSig]  = new TH1D(sPtDeltaSig[iSig].Data(),  "", nDeltaBins, rDeltaBins[0], rDeltaBins[1]);
    hPtTrackSig[iSig]  = new TH1D(sPtTrackSig[iSig].Data(),  "", nPtBins,    rPtBins[0],    rPtBins[1]);
    hPtFracSig[iSig]   = new TH1D(sPtFracSig[iSig].Data(),   "", nFracBins,  rFracBins[0],  rFracBins[1]);
    hPtTrkTruSig[iSig] = new TH1D(sPtTrkTruSig[iSig].Data(), "", nPtBins,    rPtBins[0],    rPtBins[1]);
    hPtDeltaSig[iSig]  -> Sumw2();
    hPtTrackSig[iSig]  -> Sumw2();
    hPtFracSig[iSig]   -> Sumw2();
    hPtTrkTruSig[iSig] -> Sumw2();

    hPtDeltaVsFracSig[iSig]  = new TH2D(sPtDeltaVsFracSig[iSig].Data(),  "", nFracBins, rFracBins[0], rFracBins[1], nDeltaBins, rDeltaBins[0], rDeltaBins[1]);
    hPtDeltaVsTrueSig[iSig]  = new TH2D(sPtDeltaVsTrueSig[iSig].Data(),  "", nPtBins,   rPtBins[0],   rPtBins[1],   nDeltaBins, rDeltaBins[0], rDeltaBins[1]);
    hPtDeltaVsTrackSig[iSig] = new TH2D(sPtDeltaVsTrackSig[iSig].Data(), "", nPtBins,   rPtBins[0],   rPtBins[1],   nDeltaBins, rDeltaBins[0], rDeltaBins[1]);
    hPtTrueVsTrackSig[iSig]  = new TH2D(sPtTrueVsTrackSig[iSig].Data(),  "", nPtBins,   rPtBins[0],   rPtBins[1],   nPtBins,    rPtBins[0],    rPtBins[1]);
    hPtDeltaVsFracSig[iSig]  -> Sumw2();
    hPtDeltaVsTrueSig[iSig]  -> Sumw2();
    hPtDeltaVsTrackSig[iSig] -> Sumw2();
    hPtTrueVsTrackSig[iSig]  -> Sumw2();
  }

  cout << "      Initialized output histograms." << endl;
  return;

}  // end 'InitHists()'

// end ------------------------------------------------------------------------
